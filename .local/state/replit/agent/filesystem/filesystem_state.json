{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a comprehensive library management system built with modern web technologies. The application provides a full-featured digital library platform for managing books, tracking borrowings, user administration, and monitoring activity logs. It features real-time analytics, role-based access control, and a responsive user interface designed for both librarians and library users.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript for type safety\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query for server state management and caching\n- **UI Framework**: Radix UI components with shadcn/ui design system\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **Build Tool**: Vite for fast development and optimized builds\n- **Form Handling**: React Hook Form with Zod schema validation\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript for full-stack type safety\n- **Database ORM**: Drizzle ORM for type-safe database interactions\n- **Authentication**: Replit's OpenID Connect (OIDC) integration with Passport.js\n- **Session Management**: Express sessions with PostgreSQL storage\n- **API Design**: RESTful endpoints with JSON responses\n- **Middleware**: CORS, body parsing, and custom logging middleware\n\n## Database Design\n- **Database**: PostgreSQL with Neon serverless driver\n- **Schema Management**: Drizzle Kit for migrations and schema updates\n- **Core Tables**:\n  - Users: Authentication profiles with role-based permissions (admin/user)\n  - Books: Complete book catalog with metadata and availability tracking\n  - Borrowings: Transaction records with due dates and return status\n  - Activity Logs: Comprehensive audit trail for all system actions\n  - Sessions: Secure session storage for authentication\n\n## Authentication & Authorization\n- **Authentication Provider**: Replit OIDC for seamless platform integration\n- **Session Security**: HTTP-only cookies with CSRF protection\n- **Role-Based Access**: Admin and user roles with feature-level permissions\n- **User Management**: Automatic user provisioning on first login\n\n## Key Features\n- **Dashboard Analytics**: Real-time statistics and activity monitoring\n- **Book Management**: CRUD operations with search and filtering capabilities\n- **Borrowing System**: Complete checkout/return workflow with overdue tracking\n- **User Administration**: Role management and user activity oversight (admin only)\n- **Activity Logging**: Comprehensive audit trail for all system operations\n- **Responsive Design**: Mobile-first approach with adaptive layouts\n\n## Development Workflow\n- **Hot Reloading**: Vite HMR for instant development feedback\n- **Type Safety**: End-to-end TypeScript with shared schemas\n- **Code Quality**: ESLint and Prettier for consistent code formatting\n- **Database Development**: Push-based schema updates with Drizzle\n\n# External Dependencies\n\n## Core Framework Dependencies\n- **React Ecosystem**: React 18+ with modern hooks and concurrent features\n- **TanStack Query**: Powerful data fetching and caching library\n- **Wouter**: Minimalist router for single-page applications\n\n## UI and Styling\n- **Radix UI**: Unstyled, accessible UI primitives\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Modern icon library\n- **shadcn/ui**: Pre-built component library\n\n## Backend Infrastructure\n- **Express.js**: Web application framework for Node.js\n- **Drizzle ORM**: TypeScript-first ORM for PostgreSQL\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Passport.js**: Authentication middleware\n\n## Authentication Services\n- **Replit Authentication**: OIDC provider integration\n- **OpenID Client**: Standards-compliant authentication flow\n- **Session Management**: Secure session storage and management\n\n## Development Tools\n- **Vite**: Next-generation frontend build tool\n- **TypeScript**: Static type checking and enhanced developer experience\n- **Zod**: Schema validation for runtime type safety\n- **ESBuild**: Fast JavaScript bundler for production builds\n\n## Replit-Specific Integrations\n- **Replit Auth**: Platform-native authentication system\n- **Replit Deployment**: Integrated hosting and deployment pipeline\n- **Development Plugins**: Enhanced development experience with error overlays and debugging tools","size_bytes":4446},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"/**\n * ========================================================================\n * DATABASE CONNECTION - KẾT NỐI DATABASE\n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Module thiết lập kết nối PostgreSQL với Neon serverless database.\n * Sử dụng Drizzle ORM để type-safe database operations.\n */\nimport { neon } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-http';\nimport * as schema from \"@shared/schema\";\n\n/**\n * Kiểm tra DATABASE_URL environment variable\n * Replit tự động provision và set DATABASE_URL khi tạo PostgreSQL database\n */\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\n/**\n * ========================================================================\n * DATABASE SETUP - THIẾT LẬP DATABASE\n * ========================================================================\n */\n\n// Tạo Neon HTTP client với serverless connection\nconst sql = neon(process.env.DATABASE_URL!);\n\n// Export Drizzle instance với schema để type-safe operations\nexport const db = drizzle(sql, { schema });","size_bytes":1248},"server/index.ts":{"content":"/**\n * ========================================================================\n * SERVER ENTRY POINT - ĐIỂM KHỞI ĐỘNG SERVER  \n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * File chính khởi động Express server cho hệ thống quản lý thư viện.\n * Xử lý cấu hình middleware, routing, và serving static files.\n */\n\n// Cấu hình SSL cho môi trường development (bỏ qua SSL verification)\nif (process.env.NODE_ENV === 'development') {\n  process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\n}\n\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\n/**\n * ========================================================================\n * EXPRESS APP SETUP - THIẾT LẬP EXPRESS APP\n * ========================================================================\n */\n\nconst app = express();\n\n// Middleware cơ bản để parse request body\napp.use(express.json());                                    // Parse JSON payloads\napp.use(express.urlencoded({ extended: false }));          // Parse URL-encoded payloads\n\n/**\n * Request Logging Middleware - Middleware ghi log request\n * Chỉ log các API calls (/api/*) với thời gian thực thi và response\n */\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  // Intercept res.json để capture response data\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  // Log sau khi response hoàn tất\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      // Truncate log nếu quá dài để tránh spam console\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n/**\n * ========================================================================\n * SERVER STARTUP - KHỞI ĐỘNG SERVER\n * ========================================================================\n */\n(async () => {\n  // Đăng ký tất cả API routes và trả về HTTP server instance\n  const server = await registerRoutes(app);\n\n  /**\n   * Global Error Handler - Middleware xử lý lỗi toàn cục\n   * Catch mọi lỗi không được handle ở routes và trả về JSON response\n   */\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;  // Re-throw để log trong console\n  });\n\n  /**\n   * Frontend Setup - Thiết lập phục vụ frontend\n   * Development: Sử dụng Vite dev server với HMR\n   * Production: Serve static files đã được build\n   * \n   * QUAN TRỌNG: Setup Vite sau khi đăng ký routes để tránh catch-all route\n   * của Vite can thiệp vào API routes\n   */\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);  // Vite dev server với HMR\n  } else {\n    serveStatic(app);              // Serve static files từ dist/\n  }\n\n  /**\n   * Server Listening - Khởi động server nghe connections\n   * \n   * QUAN TRỌNG: Chỉ sử dụng port 5000 trong Replit environment\n   * - Các ports khác bị firewall chặn\n   * - Port 5000 phục vụ cả API và client\n   * - Đây là port duy nhất không bị firewall\n   */\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",    // Lắng nghe tất cả network interfaces\n    reusePort: true,    // Cho phép restart server mà không bị \"port in use\"\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":4218},"server/localAuth.ts":{"content":"/**\n * ========================================================================\n * LOCAL AUTHENTICATION - XÁC THỰC LOCAL\n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Module xử lý xác thực local với bcrypt password hashing.\n * Hỗ trợ cả admin account từ environment variables và user accounts trong database.\n */\nimport bcrypt from \"bcrypt\";\nimport { storage } from \"./storage\";\n\n/**\n * Interface định nghĩa structure của LocalUser\n * Khác với User trong database, LocalUser bao gồm username và password fields\n */\nexport interface LocalUser {\n  id: string;\n  username: string;\n  password: string;      // Luôn empty string khi trả về (bảo mật)\n  role: 'admin' | 'user';\n  email: string;\n  firstName: string;\n  lastName: string;\n}\n\n/**\n * ========================================================================\n * PASSWORD HASHING - MÃ HÓA MẬT KHẨU\n * ========================================================================\n */\n\n// Số rounds cho bcrypt salt (12 rounds = cân bằng security vs performance)\nconst SALT_ROUNDS = 12;\n\n/**\n * Hash password với bcrypt\n * Sử dụng 12 salt rounds để cân bằng bảo mật và hiệu năng\n */\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, SALT_ROUNDS);\n}\n\n/**\n * Verify password với hash đã lưu\n * Dùng bcrypt.compare để so sánh an toàn\n */\nexport async function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n  return bcrypt.compare(password, hashedPassword);\n}\n\n/**\n * ========================================================================\n * USER MANAGEMENT - QUẢN LÝ NGƯỜI DÙNG\n * ========================================================================\n * \n * Tất cả user data được lưu trong PostgreSQL, không còn in-memory storage\n */\n\n/**\n * Tạo user local mới với username/password\n * \n * Business logic:\n * - Username được convert thành lowercase để tránh duplicate\n * - Password được hash với bcrypt trước khi lưu DB\n * - Default role là 'user' nếu không specify\n * - Throws error nếu username đã tồn tại\n */\nexport async function createLocalUser(userData: { username: string; password: string; email: string; firstName: string; lastName: string; role?: 'admin' | 'user' }): Promise<LocalUser> {\n  const username = userData.username.toLowerCase();  // Normalize username\n  \n  // Kiểm tra username đã tồn tại chưa (case-insensitive)\n  const existingUser = await storage.getUserByUsername(username);\n  if (existingUser) {\n    throw new Error('Tên đăng nhập đã tồn tại');\n  }\n\n  // Hash password với bcrypt trước khi lưu database\n  const hashedPassword = await hashPassword(userData.password);\n  \n  // Tạo user trong database với password đã được hash\n  const user = await storage.createLocalUser({\n    username,\n    hashedPassword,\n    email: userData.email,\n    firstName: userData.firstName,\n    lastName: userData.lastName,\n    role: userData.role || 'user',  // Default role là 'user'\n  });\n\n  // Return user object nhưng không bao gồm password (bảo mật)\n  return {\n    id: user.id,\n    username: user.username!,\n    password: \"\",                                    // Không trả về password\n    role: user.role as 'admin' | 'user',\n    email: user.email!,\n    firstName: user.firstName!,\n    lastName: user.lastName!,\n  };\n}\n\n/**\n * ========================================================================\n * AUTHENTICATION LOGIC - LOGIC XÁC THỰC\n * ========================================================================\n */\n\n/**\n * Xác thực user với username/password\n * \n * Dual authentication system:\n * 1. Admin account: Xác thực qua environment variables (ADMIN_USERNAME, ADMIN_PASSWORD)\n * 2. Regular users: Xác thực qua database với bcrypt password hash\n * \n * Side effects:\n * - Tự động tạo/update admin user trong database nếu auth thành công\n * - Admin user có ID cố định \"local_admin\"\n */\nexport async function authenticateLocalUser(username: string, password: string): Promise<LocalUser | null> {\n  const usernameKey = username.toLowerCase();  // Normalize username\n  \n  /**\n   * ADMIN AUTHENTICATION - XÁC THỰC ADMIN\n   * Admin credentials được lưu trong environment variables\n   */\n  const adminUsername = process.env.ADMIN_USERNAME;\n  const adminPassword = process.env.ADMIN_PASSWORD;\n  \n  // Kiểm tra admin credentials đã được cấu hình chưa\n  if (!adminUsername || !adminPassword) {\n    throw new Error(\"Admin credentials not configured. Please set ADMIN_USERNAME and ADMIN_PASSWORD environment variables.\");\n  }\n  \n  // Nếu username match với admin username từ env vars\n  if (usernameKey === adminUsername.toLowerCase()) {\n    // Xác thực admin bằng plain text password từ environment\n    if (password === adminPassword) {\n      const adminUserId = \"local_admin\";  // ID cố định cho admin\n      \n      // Đảm bảo admin user tồn tại trong database (upsert)\n      await storage.upsertUser({\n        id: adminUserId,\n        email: process.env.ADMIN_EMAIL || \"admin@library.local\",\n        firstName: \"Quản trị viên\",\n        lastName: \"Hệ thống\",\n        profileImageUrl: null,\n        role: 'admin',\n      });\n\n      return {\n        id: adminUserId,\n        username: adminUsername,\n        password: \"\",                                                       // Không trả về password\n        role: 'admin',\n        email: process.env.ADMIN_EMAIL || \"admin@library.local\",\n        firstName: \"Quản trị viên\",\n        lastName: \"Hệ thống\",\n      };\n    }\n  }\n\n  /**\n   * REGULAR USER AUTHENTICATION - XÁC THỰC USER THƯỜNG\n   * User credentials được lưu trong database với bcrypt hash\n   */\n  const userRecord = await storage.getUserByUsername(usernameKey);\n  if (userRecord && userRecord.hashedPassword) {\n    // Verify password với bcrypt hash stored trong database\n    const isValid = await verifyPassword(password, userRecord.hashedPassword);\n    if (isValid) {\n      return {\n        id: userRecord.id,\n        username: userRecord.username!,\n        password: \"\",                                                       // Không trả về password\n        role: userRecord.role as 'admin' | 'user',\n        email: userRecord.email!,\n        firstName: userRecord.firstName!,\n        lastName: userRecord.lastName!,\n      };\n    }\n  }\n  \n  // Không tìm thấy user hoặc password sai\n  return null;\n}\n\n/**\n * ========================================================================\n * SESSION MANAGEMENT - QUẢN LÝ SESSION\n * ========================================================================\n */\n\n/**\n * Tạo session data cho authentication local\n * \n * Structure tương thích với format session trong PostgreSQL store.\n * Session có thời hạn 7 ngày và chứa user claims cần thiết.\n */\nexport function createLocalAuthSession(user: LocalUser) {\n  return {\n    claims: {\n      sub: user.id,                    // Subject - user ID\n      email: user.email,\n      first_name: user.firstName,\n      last_name: user.lastName,\n      role: user.role,                 // Admin hoặc user role\n    },\n    expires_at: Math.floor(Date.now() / 1000) + (7 * 24 * 60 * 60), // 7 ngày tính bằng seconds\n  };\n}","size_bytes":7493},"server/replitAuth.ts":{"content":"/**\n * ========================================================================\n * REPLIT AUTHENTICATION - XÁC THỰC REPLIT\n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Module xử lý xác thực qua Replit OpenID Connect (OIDC).\n * LưU ý: File này có thể không được sử dụng trong setup hiện tại\n * vì hệ thống đang dùng local authentication.\n */\nimport * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\n/**\n * Kiểm tra REPLIT_DOMAINS environment variable\n * Cần thiết cho multi-domain Replit authentication\n */\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\n/**\n * ========================================================================\n * OIDC CONFIGURATION - CẤU HÌNH OIDC\n * ========================================================================\n */\n\n/**\n * Memoized OIDC configuration discovery\n * Cache 1 giờ để tránh gọi discovery endpoint liên tục\n */\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }  // Cache 1 giờ\n);\n\n/**\n * ========================================================================\n * SESSION MANAGEMENT - QUẢN LÝ SESSION\n * ========================================================================\n */\n\n/**\n * Tạo session configuration cho Replit authentication\n * Tương tự như local auth nhưng dành cho OIDC flows\n */\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 tuần\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\", // Chỉ HTTPS trong production\n      sameSite: \"lax\",                               // Cho phép cross-site cho Replit\n      maxAge: sessionTtl,\n    },\n  });\n}\n\n/**\n * ========================================================================\n * USER SESSION HELPERS - TIỆN ÍCH USER SESSION\n * ========================================================================\n */\n\n/**\n * Cập nhật session với tokens mới từ OIDC response\n */\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\n/**\n * Upsert user từ OIDC claims vào database\n * Tương tự như local auth nhưng dữ liệu từ Replit profile\n */\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],                              // Subject từ OIDC\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],   // Avatar từ Replit\n  });\n}\n\n/**\n * ========================================================================\n * AUTHENTICATION SETUP - THIẾT LẬP XÁC THỰC\n * ========================================================================\n */\n\n/**\n * Setup complete Replit OIDC authentication cho Express app\n * \n * Flow chính:\n * 1. User click login → redirect đến Replit OAuth\n * 2. User đăng nhập ở Replit → callback về app\n * 3. App exchange code → tokens, tạo user session\n * 4. Subsequent requests sử dụng session + refresh tokens\n */\nexport async function setupAuth(app: Express) {\n  // Trust proxy cần thiết cho Replit environment\n  app.set(\"trust proxy\", 1);\n  \n  // Setup session và passport middlewares\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Load OIDC configuration từ Replit discovery endpoint\n  const config = await getOidcConfig();\n\n  /**\n   * Verify function được gọi sau khi OIDC flow thành công\n   * Nhiệm vụ: upsert user vào database và setup session\n   */\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);          // Set tokens vào session\n    await upsertUser(tokens.claims());        // Lưu user info vào database\n    verified(null, user);                     // Signal thành công cho passport\n  };\n\n  /**\n   * Đăng ký Passport strategy cho từng domain trong REPLIT_DOMAINS\n   * Multi-domain support cho các repl deployments khác nhau\n   */\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,         // Unique strategy name per domain\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,  // Domain-specific callback\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  // Passport serialization - store/retrieve user từ session\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  /**\n   * ========================================================================\n   * AUTHENTICATION ROUTES - ROUTES XÁC THỰC\n   * ========================================================================\n   */\n\n  /**\n   * GET /api/login - Khởi tạo OIDC authentication flow\n   * Redirect user đến Replit OAuth với prompt để re-consent\n   */\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",              // Force user re-authenticate\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  /**\n   * GET /api/callback - OIDC callback route\n   * Replit redirect về đây sau khi user đăng nhập thành công\n   * Success: redirect về home, Failure: back to login\n   */\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",       // Về trang chủ nếu thành công\n      failureRedirect: \"/api/login\",        // Back to login nếu failed\n    })(req, res, next);\n  });\n\n  /**\n   * GET /api/logout - Logout và clear session\n   * Redirect đến Replit logout để end session ở provider side\n   */\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\n/**\n * ========================================================================\n * AUTHENTICATION MIDDLEWARE - MIDDLEWARE XÁC THỰC\n * ========================================================================\n */\n\n/**\n * Middleware bảo vệ protected routes với Replit OIDC authentication\n * \n * Logic xử lý:\n * 1. Kiểm tra user đã authenticate và có expires_at\n * 2. Nếu token chưa hết hạn → next()\n * 3. Nếu hết hạn → thử refresh với refresh_token\n * 4. Refresh thành công → update session, next()\n * 5. Refresh thất bại → return 401 Unauthorized\n * \n * Side effects:\n * - Update user session với tokens mới khi refresh\n * - Return JSON error response cho API calls\n */\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  // Kiểm tra basic authentication status và token metadata\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  \n  // Token còn hạn sử dụng → cho phép tiếp tục\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  // Token hết hạn → thử refresh bằng refresh_token\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    // Gọi OIDC token refresh endpoint\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    \n    // Update session với tokens mới và expiry time mới\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    // Refresh thất bại → force re-authentication\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":9243},"server/routes.ts":{"content":"/**\n * ========================================================================\n * API ROUTES CHO HỆ THỐNG QUẢN LÝ THƯ VIỆN\n * LIBRARY MANAGEMENT SYSTEM API ROUTES\n * ========================================================================\n * \n * File này định nghĩa tất cả API endpoints cho hệ thống quản lý thư viện,\n * bao gồm xác thực, quản lý người dùng, sách, mượn/trả sách và thông báo.\n */\nimport type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { authenticateLocalUser, createLocalAuthSession, createLocalUser } from \"./localAuth\";\nimport { insertBookSchema, insertBorrowingSchema, insertActivityLogSchema, insertNotificationSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\n\n/**\n * Đăng ký tất cả routes và khởi tạo HTTP server\n * Cấu hình session PostgreSQL cho xác thực local\n */\nexport async function registerRoutes(app: Express): Promise<Server> {\n  /**\n   * ========================================================================\n   * CẤU HÌNH SESSION VÀ XÁC THỰC - SESSION & AUTHENTICATION SETUP\n   * ========================================================================\n   */\n  \n  // Cấu hình session store với PostgreSQL (TTL: 7 ngày)\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 tuần\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,  // Bảng sessions đã được tạo trong schema\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  \n  // Cấu hình middleware session với bảo mật cho production\n  app.set(\"trust proxy\", 1);  // Tin tưởng reverse proxy (Replit)\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'fallback-secret-for-development',\n    store: sessionStore,  // Lưu session trong PostgreSQL\n    resave: false,        // Không lưu lại session nếu không thay đổi\n    saveUninitialized: false,  // Không lưu session rỗng\n    cookie: {\n      httpOnly: true,     // Chặn JavaScript truy cập cookie\n      secure: process.env.NODE_ENV === \"production\",  // HTTPS trong production\n      sameSite: \"lax\",    // Bảo vệ CSRF\n      maxAge: sessionTtl,\n    },\n  }));\n\n  /**\n   * ========================================================================\n   * AUTHENTICATION ROUTES - ROUTE XÁC THỰC\n   * ========================================================================\n   */\n  \n  /**\n   * POST /api/auth/login - Đăng nhập local\n   * Xác thực username/password và tạo session trong PostgreSQL\n   * Special case: Kiểm tra admin credentials từ environment variables\n   */\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      console.log(\"Login attempt for username:\", username);\n      \n      if (!username || !password) {\n        console.log(\"Missing username or password\");\n        return res.status(400).json({ message: \"Tên đăng nhập và mật khẩu là bắt buộc\" });\n      }\n\n      // Xác thực qua localAuth - có xử lý admin credentials từ env vars\n      const user = await authenticateLocalUser(username, password);\n      if (!user) {\n        console.log(\"Authentication failed for username:\", username);\n        return res.status(401).json({ message: \"Tên đăng nhập hoặc mật khẩu không đúng\" });\n      }\n\n      console.log(\"User authenticated successfully:\", user.id);\n\n      // Tạo session data và lưu vào PostgreSQL store\n      const sessionData = createLocalAuthSession(user);\n      (req.session as any).user = sessionData;  // Tự động persist vào DB\n      console.log(\"Session created successfully for user:\", user.id);\n      \n      // Chỉ trả về thông tin cơ bản, không bao gồm password hash\n      res.json({ \n        message: \"Đăng nhập thành công\", \n        user: { id: user.id, username: user.username, role: user.role } \n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      // Xử lý lỗi đặc biệt khi admin credentials chưa được cấu hình\n      if (error instanceof Error && error.message.includes(\"Admin credentials not configured\")) {\n        return res.status(500).json({ message: \"Cấu hình quản trị viên không đầy đủ\", error: error.message });\n      }\n      res.status(500).json({ message: \"Lỗi server\", error: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  /**\n   * POST /api/auth/register - Đăng ký tài khoản mới\n   * Tạo user với role 'user' và tự động đăng nhập sau khi đăng ký thành công\n   * Side effect: Kiểm tra trùng lặp username trong localAuth.createLocalUser\n   */\n  app.post('/api/auth/register', async (req, res) => {\n    try {\n      const { username, password, confirmPassword, email, firstName, lastName } = req.body;\n      console.log(\"Registration attempt for username:\", username);\n      \n      // Validation tại server-side (ngoài validation ở frontend)\n      if (!username || !password || !confirmPassword || !email || !firstName || !lastName) {\n        console.log(\"Missing required fields\");\n        return res.status(400).json({ message: \"Tất cả thông tin là bắt buộc\" });\n      }\n\n      if (password !== confirmPassword) {\n        console.log(\"Password confirmation mismatch\");\n        return res.status(400).json({ message: \"Mật khẩu xác nhận không khớp\" });\n      }\n\n      if (password.length < 3) {\n        console.log(\"Password too short\");\n        return res.status(400).json({ message: \"Mật khẩu phải có ít nhất 3 ký tự\" });\n      }\n\n      // Tạo user mới - createLocalUser sẽ hash password và kiểm tra duplicate username\n      const user = await createLocalUser({\n        username,\n        password,\n        email,\n        firstName,\n        lastName,\n        role: 'user'  // Mặc định tạo user với role 'user', không phải admin\n      });\n\n      console.log(\"User created successfully:\", user.id);\n\n      // Tự động đăng nhập người dùng vừa đăng ký (UX improvement)\n      const sessionData = createLocalAuthSession(user);\n      (req.session as any).user = sessionData;  // Lưu session vào PostgreSQL\n      console.log(\"User registered and logged in successfully:\", user.id);\n      res.status(201).json({ \n        message: \"Tạo tài khoản thành công\", \n        user: { id: user.id, username: user.username, role: user.role } \n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      // Xử lý lỗi duplicate username từ createLocalUser\n      if (error instanceof Error && error.message.includes(\"Tên đăng nhập đã tồn tại\")) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Lỗi server\", error: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  /**\n   * Middleware xác thực - Kiểm tra session hợp lệ\n   * Chỉ áp dụng cho local authentication (không dùng Replit Auth)\n   */\n  const requireAuth = async (req: any, res: any, next: any) => {\n    if (req.session && (req.session as any).user && (req.session as any).user.claims) {\n      req.user = (req.session as any).user;  // Gán user vào request object\n      return next();\n    }\n    return res.status(401).json({ message: \"Unauthorized\" });\n  };\n\n  /**\n   * POST /api/auth/logout - Đăng xuất\n   * Xóa session khỏi PostgreSQL store và cookie\n   */\n  app.post('/api/auth/logout', (req: any, res) => {\n    req.session.destroy((err: any) => {\n      if (err) {\n        console.error(\"Session destruction error:\", err);\n        return res.status(500).json({ message: \"Lỗi đăng xuất\" });\n      }\n      res.json({ message: \"Đăng xuất thành công\" });\n    });\n  });\n\n  /**\n   * GET /api/logout - Đăng xuất và redirect về trang login\n   * Dùng cho browser navigation, khác với POST /api/auth/logout\n   */\n  app.get('/api/logout', (req: any, res) => {\n    req.session.destroy((err: any) => {\n      if (err) {\n        console.error(\"Session destruction error:\", err);\n        return res.redirect('/login?error=logout-failed');\n      }\n      res.redirect('/login');\n    });\n  });\n\n  /**\n   * ========================================================================\n   * USER & DASHBOARD ROUTES - ROUTES NGƯỜI DÙNG VÀ DASHBOARD\n   * ========================================================================\n   */\n   \n  /**\n   * GET /api/auth/user - Lấy thông tin user hiện tại từ session\n   */\n  app.get('/api/auth/user', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  /**\n   * GET /api/dashboard/stats - Lấy thống kê tổng quan cho dashboard\n   * Trả về: tổng số sách, user, borrowings, overdue books\n   */\n  app.get(\"/api/dashboard/stats\", requireAuth, async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  /**\n   * ========================================================================\n   * BOOK MANAGEMENT ROUTES - ROUTES QUẢN LÝ SÁCH\n   * ========================================================================\n   */\n   \n  /**\n   * GET /api/books - Lấy danh sách sách với search, filter và pagination\n   * Query params: search, searchField, genre, status, page, limit\n   */\n  app.get(\"/api/books\", requireAuth, async (req, res) => {\n    try {\n      const { search, searchField, genre, status, page = \"1\", limit = \"10\" } = req.query;\n      const result = await storage.getBooks({\n        search: search as string,\n        searchField: searchField as string,\n        genre: genre as string,\n        status: status as string,\n        page: parseInt(page as string),\n        limit: parseInt(limit as string),\n      });\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error fetching books:\", error);\n      res.status(500).json({ message: \"Failed to fetch books\" });\n    }\n  });\n\n  /**\n   * GET /api/books/:id - Lấy chi tiết sách theo ID\n   */\n  app.get(\"/api/books/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const book = await storage.getBookById(id);\n      if (!book) {\n        return res.status(404).json({ message: \"Book not found\" });\n      }\n      res.json(book);\n    } catch (error) {\n      console.error(\"Error fetching book:\", error);\n      res.status(500).json({ message: \"Failed to fetch book\" });\n    }\n  });\n\n  /**\n   * POST /api/books - Thêm sách mới\n   * Chỉ admin được phép thực hiện\n   * Business logic: Nếu ISBN đã tồn tại, tăng quantity thay vì tạo mới\n   */\n  app.post(\"/api/books\", requireAuth, async (req: any, res) => {\n    try {\n      // Kiểm tra quyền admin\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      // Validate dữ liệu với Zod schema\n      const validatedData = insertBookSchema.parse(req.body);\n      const book = await storage.createBook(validatedData);  // Smart logic: cộng quantity nếu ISBN tồn tại\n      \n      // Ghi log activity để audit trail\n      await storage.createActivityLog({\n        userId,\n        action: \"book_added\",\n        details: `Added book: ${book.title}`,\n        entityType: \"book\",\n        entityId: book.id.toString(),\n      });\n\n      res.status(201).json(book);\n    } catch (error) {\n      console.error(\"Error creating book:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid book data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create book\" });\n    }\n  });\n\n  /**\n   * PUT /api/books/:id - Cập nhật thông tin sách\n   * Chỉ admin được phép thực hiện\n   */\n  app.put(\"/api/books/:id\", requireAuth, async (req: any, res) => {\n    try {\n      // Kiểm tra quyền admin\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const id = parseInt(req.params.id);\n      const validatedData = insertBookSchema.partial().parse(req.body);  // partial() cho phép update một phần\n      const book = await storage.updateBook(id, validatedData);\n      \n      // Ghi log activity để audit trail\n      await storage.createActivityLog({\n        userId,\n        action: \"book_updated\",\n        details: `Updated book: ${book.title}`,\n        entityType: \"book\",\n        entityId: book.id.toString(),\n      });\n\n      res.json(book);\n    } catch (error) {\n      console.error(\"Error updating book:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid book data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update book\" });\n    }\n  });\n\n  /**\n   * DELETE /api/books/:id - Xóa sách\n   * Chỉ admin được phép thực hiện\n   * Lưu ý: Cần kiểm tra xem sách có đang được mượn không\n   */\n  app.delete(\"/api/books/:id\", requireAuth, async (req: any, res) => {\n    try {\n      // Kiểm tra quyền admin\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const id = parseInt(req.params.id);\n      const book = await storage.getBookById(id);\n      if (!book) {\n        return res.status(404).json({ message: \"Book not found\" });\n      }\n\n      // Lưu ý: Trong thực tế nên kiểm tra xem sách có đang được mượn không\n      await storage.deleteBook(id);\n      \n      // Ghi log activity để audit trail\n      await storage.createActivityLog({\n        userId,\n        action: \"book_deleted\",\n        details: `Deleted book: ${book.title}`,\n        entityType: \"book\",\n        entityId: book.id.toString(),\n      });\n\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting book:\", error);\n      res.status(500).json({ message: \"Failed to delete book\" });\n    }\n  });\n\n  /**\n   * ========================================================================\n   * BORROWING MANAGEMENT ROUTES - ROUTES QUẢN LÝ MƯỢN/TRẢ SÁCH\n   * ========================================================================\n   */\n   \n  /**\n   * GET /api/borrowings - Lấy danh sách giao dịch mượn sách\n   * User thường chỉ thấy borrowings của mình, admin thấy tất cả\n   */\n  app.get(\"/api/borrowings\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      const { status, page = \"1\", limit = \"10\" } = req.query;\n      \n      const result = await storage.getBorrowings({\n        userId: user?.role !== 'admin' ? userId : undefined, // User thường chỉ thấy của mình\n        status: status as string,\n        page: parseInt(page as string),\n        limit: parseInt(limit as string),\n      });\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error fetching borrowings:\", error);\n      res.status(500).json({ message: \"Failed to fetch borrowings\" });\n    }\n  });\n\n  /**\n   * POST /api/borrowings - Tạo giao dịch mượn sách mới\n   * Kiểm tra sách có sẵn và tự động giảm availableQuantity\n   */\n  app.post(\"/api/borrowings\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { bookId, dueDate } = req.body;\n      \n      // Kiểm tra sách có tồn tại và còn sẵn không\n      const book = await storage.getBookById(bookId);\n      if (!book) {\n        return res.status(404).json({ message: \"Book not found\" });\n      }\n      if (book.availableQuantity <= 0) {\n        return res.status(400).json({ message: \"Book is not available\" });\n      }\n\n      // Tạo giao dịch mượn sách - tự động giảm availableQuantity\n      const borrowing = await storage.createBorrowing({\n        userId,\n        bookId,\n        dueDate: new Date(dueDate),\n      });\n      \n      // Ghi log activity để audit trail\n      await storage.createActivityLog({\n        userId,\n        action: \"book_borrowed\",\n        details: `Borrowed book: ${book.title}`,\n        entityType: \"borrowing\",\n        entityId: borrowing.id.toString(),\n      });\n\n      res.status(201).json(borrowing);\n    } catch (error) {\n      console.error(\"Error creating borrowing:\", error);\n      res.status(500).json({ message: \"Failed to create borrowing\" });\n    }\n  });\n\n  /**\n   * PUT /api/borrowings/:id/return - Trả sách\n   * Người mượn hoặc admin có thể thực hiện\n   * Side effect: Tự động tăng availableQuantity\n   */\n  app.put(\"/api/borrowings/:id/return\", requireAuth, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const userId = req.user.claims.sub;\n      \n      const borrowing = await storage.getBorrowingById(id);\n      if (!borrowing) {\n        return res.status(404).json({ message: \"Borrowing not found\" });\n      }\n      \n      // Kiểm tra quyền: chỉ người mượn hoặc admin mới được trả sách\n      const user = await storage.getUser(userId);\n      if (borrowing.userId !== userId && user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Not authorized to return this book\" });\n      }\n\n      // Cập nhật trạng thái và tự động tăng availableQuantity\n      const updatedBorrowing = await storage.updateBorrowingStatus(id, 'returned', new Date());\n      \n      // Ghi log activity để audit trail\n      await storage.createActivityLog({\n        userId,\n        action: \"book_returned\",\n        details: `Returned book: ${borrowing.book.title}`,\n        entityType: \"borrowing\",\n        entityId: borrowing.id.toString(),\n      });\n\n      res.json(updatedBorrowing);\n    } catch (error) {\n      console.error(\"Error returning book:\", error);\n      res.status(500).json({ message: \"Failed to return book\" });\n    }\n  });\n\n  /**\n   * ========================================================================\n   * ACTIVITY LOG ROUTES - ROUTES NHẬT KÝ HOẠT ĐỘNG\n   * ========================================================================\n   */\n   \n  /**\n   * GET /api/activity-logs - Lấy danh sách nhật ký hoạt động\n   * User thường chỉ thấy activities của mình, admin thấy tất cả\n   */\n  app.get(\"/api/activity-logs\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      const { page = \"1\", limit = \"20\" } = req.query;\n      \n      const result = await storage.getActivityLogs({\n        userId: user?.role !== 'admin' ? userId : undefined, // User thường chỉ thấy của mình\n        page: parseInt(page as string),\n        limit: parseInt(limit as string),\n      });\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error fetching activity logs:\", error);\n      res.status(500).json({ message: \"Failed to fetch activity logs\" });\n    }\n  });\n\n  /**\n   * ========================================================================\n   * ADMIN MANAGEMENT ROUTES - ROUTES QUẢN LÝ ADMIN\n   * ========================================================================\n   */\n   \n  /**\n   * POST /api/auth/create-admin - Tạo tài khoản admin mới\n   * Chỉ admin hiện tại mới có thể tạo admin khác\n   */\n  app.post('/api/auth/create-admin', requireAuth, async (req: any, res) => {\n    try {\n      const currentUserId = req.user.claims.sub;\n      const currentUser = await storage.getUser(currentUserId);\n      \n      // Kiểm tra quyền admin\n      if (currentUser?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { username, password, email, firstName, lastName } = req.body;\n      console.log(\"Admin creation attempt for username:\", username);\n      \n      // Validation\n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username and password are required\" });\n      }\n\n      if (password.length < 3) {\n        return res.status(400).json({ message: \"Password must be at least 3 characters\" });\n      }\n\n      // Tạo user với role 'admin'\n      const adminUser = await createLocalUser({\n        username,\n        password,\n        email: email || `${username}@admin.local`,  // Default email nếu không có\n        firstName: firstName || \"Admin\",\n        lastName: lastName || \"User\",\n        role: 'admin'  // Khác với registration thường là 'user'\n      });\n\n      console.log(\"Admin created successfully:\", adminUser.id);\n      \n      // Ghi log activity để audit trail\n      await storage.createActivityLog({\n        userId: currentUserId,\n        action: \"admin_created\",\n        details: `Created admin account: ${adminUser.username}`,\n        entityType: \"user\",\n        entityId: adminUser.id,\n      });\n\n      res.status(201).json({ \n        message: \"Admin account created successfully\", \n        user: { id: adminUser.id, username: adminUser.username, role: adminUser.role } \n      });\n    } catch (error) {\n      console.error(\"Admin creation error:\", error);\n      if (error instanceof Error && error.message.includes(\"đã tồn tại\")) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n      res.status(500).json({ message: \"Server error\", error: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  /**\n   * ========================================================================\n   * USER MANAGEMENT ROUTES - ROUTES QUẢN LÝ NGƯỜI DÙNG\n   * ========================================================================\n   */\n   \n  /**\n   * GET /api/users - Lấy danh sách người dùng (chỉ admin)\n   * Hỗ trợ search và filter theo role\n   */\n  app.get(\"/api/users\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { search, role, page = \"1\", limit = \"10\" } = req.query;\n      const result = await storage.getAllUsers({\n        search: search as string,\n        role: role as string,\n        page: parseInt(page as string),\n        limit: parseInt(limit as string),\n      });\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  /**\n   * PUT /api/users/:targetUserId/role - Cập nhật role của người dùng (chỉ admin)\n   * Admin có thể thay đổi role của user thành admin hoặc ngược lại\n   */\n  app.put(\"/api/users/:targetUserId/role\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { targetUserId } = req.params;\n      const { role } = req.body;\n      \n      if (!['admin', 'user'].includes(role)) {\n        return res.status(400).json({ message: \"Invalid role\" });\n      }\n\n      const updatedUser = await storage.updateUserRole(targetUserId, role);\n      \n      // Ghi log activity để audit trail\n      await storage.createActivityLog({\n        userId,\n        action: \"user_role_updated\",\n        details: `Updated user role to ${role} for ${updatedUser.email}`,\n        entityType: \"user\",\n        entityId: targetUserId,\n      });\n\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user role:\", error);\n      res.status(500).json({ message: \"Failed to update user role\" });\n    }\n  });\n\n  /**\n   * ========================================================================\n   * NOTIFICATION ROUTES - ROUTES THÔNG BÁO\n   * ========================================================================\n   */\n   \n  /**\n   * GET /api/notifications - Lấy thông báo của người dùng hiện tại\n   */\n  app.get(\"/api/notifications\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const result = await storage.getUserNotifications(userId);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  /**\n   * POST /api/notifications/announcement - Tạo thông báo cho toàn bộ users (chỉ admin)\n   * Special case: userId = null nghĩa là thông báo cho tất cả users\n   * Side effect: Ghi log activity để audit trail\n   */\n  app.post(\"/api/notifications/announcement\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      // Validate dữ liệu với Zod schema\n      const validatedData = insertNotificationSchema.parse({\n        title: req.body.title,\n        content: req.body.content,\n        type: 'announcement',\n        createdById: userId,\n        userId: null, // null nghĩa là thông báo cho tất cả users\n      });\n      \n      const notification = await storage.createAnnouncement(validatedData);\n      \n      // Ghi log activity để audit trail\n      await storage.createActivityLog({\n        userId,\n        action: \"announcement_created\",\n        details: `Created announcement: ${notification.title}`,\n        entityType: \"notification\",\n        entityId: notification.id.toString(),\n      });\n\n      res.status(201).json(notification);\n    } catch (error) {\n      console.error(\"Error creating announcement:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid announcement data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create announcement\" });\n    }\n  });\n\n  /**\n   * GET /api/notifications/all - Lấy tất cả thông báo trong hệ thống (chỉ admin)\n   * Dùng để admin quản lý và xem toàn bộ notifications\n   */\n  app.get(\"/api/notifications/all\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const notifications = await storage.getAllNotifications();\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching all notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  /**\n   * DELETE /api/notifications/:id - Xóa thông báo (chỉ admin)  \n   * Side effect: Ghi log activity để audit trail\n   */\n  app.delete(\"/api/notifications/:id\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const notificationId = parseInt(req.params.id);\n      await storage.deleteNotification(notificationId);\n      \n      // Ghi log activity để audit trail\n      await storage.createActivityLog({\n        userId,\n        action: \"notification_deleted\",\n        details: `Deleted notification with ID: ${notificationId}`,\n        entityType: \"notification\",\n        entityId: notificationId.toString(),\n      });\n\n      res.json({ message: \"Notification deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting notification:\", error);\n      res.status(500).json({ message: \"Failed to delete notification\" });\n    }\n  });\n\n  /**\n   * DELETE /api/users/:targetUserId - Xóa tài khoản người dùng (chỉ admin)\n   * Business rules: \n   * - Không thể tự xóa chính mình\n   * - Không thể xóa admin khác\n   * Side effect: Ghi log activity để audit trail\n   */\n  app.delete(\"/api/users/:targetUserId\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { targetUserId } = req.params;\n      \n      // Ngăn chặn tự xóa chính mình (bảo vệ admin khỏi khóa mình ra khỏi hệ thống)\n      if (targetUserId === userId) {\n        return res.status(400).json({ message: \"Cannot delete your own account\" });\n      }\n\n      // Lấy thông tin user cần xóa để kiểm tra role\n      const targetUser = await storage.getUser(targetUserId);\n      if (!targetUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Ngăn chặn xóa admin khác (chỉ được xóa user thường)\n      if (targetUser.role === 'admin') {\n        return res.status(403).json({ message: \"Cannot delete admin accounts\" });\n      }\n\n      // Xóa user và cascade các dữ liệu liên quan\n      await storage.deleteUser(targetUserId);\n      \n      // Ghi log activity để audit trail\n      await storage.createActivityLog({\n        userId,\n        action: \"user_deleted\",\n        details: `Deleted user account: ${targetUser.email}`,\n        entityType: \"user\",\n        entityId: targetUserId,\n      });\n\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  /**\n   * ========================================================================\n   * HTTP SERVER SETUP - THIẾT LẬP HTTP SERVER\n   * ========================================================================\n   * \n   * Tạo HTTP server từ Express app và trả về để có thể start/stop từ bên ngoài\n   * Server sẽ handle tất cả routes đã được đăng ký ở trên\n   */\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":31242},"server/storage.ts":{"content":"/**\n * ============================================================================\n * LỚP TRUY CẬP DỮ LIỆU - DATABASE STORAGE LAYER\n * ============================================================================\n * \n * File này định nghĩa interface và implementation cho tất cả các thao tác\n * với cơ sở dữ liệu trong hệ thống quản lý thư viện\n * \n * Các nhóm chức năng chính:\n * - Quản lý người dùng và xác thực\n * - Quản lý sách và danh mục\n * - Quản lý mượn/trả sách\n * - Nhật ký hoạt động hệ thống\n * - Thống kê dashboard\n * - Quản lý thông báo\n */\n\nimport {\n  users,\n  books,\n  borrowings,\n  activityLogs,\n  notifications,\n  type User,\n  type UpsertUser,\n  type Book,\n  type InsertBook,\n  type Borrowing,\n  type InsertBorrowing,\n  type ActivityLog,\n  type InsertActivityLog,\n  type Notification,\n  type InsertNotification,\n  type BorrowingWithDetails,\n  type BookWithAvailability,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sql, like, or, count, isNull } from \"drizzle-orm\";\n\n/**\n * ============================================================================\n * INTERFACE ĐỊNH NGHĨA CÁC THAO TÁC DỮ LIỆU\n * ============================================================================\n * \n * Interface này định nghĩa tất cả các phương thức cần thiết để thao tác\n * với cơ sở dữ liệu. Đảm bảo tính nhất quán và dễ dàng thay đổi storage backend\n */\nexport interface IStorage {\n  \n  /**\n   * ========================================================================\n   * THAO TÁC NGƯỜI DÙNG - USER OPERATIONS\n   * ========================================================================\n   * Các phương thức bắt buộc cho hệ thống xác thực Replit Auth\n   */\n  getUser(id: string): Promise<User | undefined>;              // Lấy thông tin người dùng theo ID\n  upsertUser(user: UpsertUser): Promise<User>;                 // Tạo mới hoặc cập nhật người dùng\n  \n  /**\n   * ========================================================================\n   * XÁC THỰC CỤC BỘ - LOCAL AUTHENTICATION\n   * ========================================================================\n   * Các phương thức hỗ trợ đăng nhập bằng username/password\n   */\n  getUserByUsername(username: string): Promise<User | undefined>; // Tìm người dùng theo tên đăng nhập\n  createLocalUser(userData: {                                   // Tạo tài khoản đăng nhập cục bộ\n    username: string;\n    hashedPassword: string;\n    email: string;\n    firstName: string;\n    lastName: string;\n    role?: 'admin' | 'user';\n  }): Promise<User>;\n  \n  /**\n   * ========================================================================\n   * QUẢN LÝ SÁCH - BOOK MANAGEMENT\n   * ========================================================================\n   * Các thao tác CRUD với danh mục sách trong thư viện\n   */\n  getBooks(params: {                                           // Lấy danh sách sách với bộ lọc\n    search?: string;        // Từ khóa tìm kiếm\n    searchField?: string;   // Trường tìm kiếm (title, author, isbn, genre)\n    genre?: string;         // Lọc theo thể loại\n    status?: string;        // Lọc theo trạng thái (available/borrowed)\n    page?: number;          // Trang hiện tại (phân trang)\n    limit?: number;         // Số items mỗi trang\n  }): Promise<{ books: BookWithAvailability[]; total: number }>;\n  getBookById(id: number): Promise<Book | undefined>;          // Lấy thông tin sách theo ID\n  getBookByIsbn(isbn: string): Promise<Book | undefined>;      // Lấy thông tin sách theo mã ISBN\n  createBook(book: InsertBook): Promise<Book>;                 // Thêm sách mới vào thư viện\n  updateBook(id: number, book: Partial<InsertBook>): Promise<Book>; // Cập nhật thông tin sách\n  deleteBook(id: number): Promise<void>;                       // Xóa sách khỏi thư viện\n  \n  /**\n   * ========================================================================\n   * QUẢN LÝ MƯỢN/TRẢ SÁCH - BORROWING MANAGEMENT\n   * ========================================================================\n   * Các thao tác liên quan đến việc mượn và trả sách\n   */\n  getBorrowings(params: {                                      // Lấy danh sách giao dịch mượn sách\n    userId?: string;        // Lọc theo người dùng cụ thể\n    status?: string;        // Lọc theo trạng thái (active/returned/overdue)\n    page?: number;          // Trang hiện tại\n    limit?: number;         // Số items mỗi trang\n  }): Promise<{ borrowings: BorrowingWithDetails[]; total: number }>;\n  getBorrowingById(id: number): Promise<BorrowingWithDetails | undefined>; // Lấy chi tiết giao dịch mượn\n  createBorrowing(borrowing: InsertBorrowing): Promise<Borrowing>;         // Tạo giao dịch mượn sách mới\n  updateBorrowingStatus(id: number, status: 'returned' | 'overdue', returnDate?: Date): Promise<Borrowing>; // Cập nhật trạng thái mượn\n  \n  /**\n   * ========================================================================\n   * NHẬT KÝ HOẠT ĐỘNG - ACTIVITY LOGGING\n   * ========================================================================\n   * Theo dõi và ghi lại các hoạt động của người dùng\n   */\n  getActivityLogs(params: {                                    // Lấy danh sách nhật ký hoạt động\n    userId?: string;        // Lọc theo người dùng cụ thể\n    page?: number;          // Trang hiện tại\n    limit?: number;         // Số items mỗi trang\n  }): Promise<{ logs: (ActivityLog & { user: User })[]; total: number }>;\n  createActivityLog(log: InsertActivityLog): Promise<ActivityLog>; // Tạo bản ghi nhật ký mới\n  \n  /**\n   * ========================================================================\n   * THỐNG KÊ DASHBOARD - DASHBOARD STATISTICS\n   * ========================================================================\n   * Tính toán và cung cấp các số liệu thống kê tổng quan\n   */\n  getDashboardStats(): Promise<{                               // Lấy thống kê tổng quan cho dashboard\n    totalBooks: number;          // Tổng số sách\n    totalUsers: number;          // Tổng số người dùng\n    activeBorrowings: number;    // Số sách đang được mượn\n    overdueBorrowings: number;   // Số sách quá hạn\n    popularBooks: { book: Book; borrowCount: number }[]; // Top sách được mượn nhiều nhất\n  }>;\n  \n  /**\n   * ========================================================================\n   * QUẢN LÝ NGƯỜI DÙNG - USER MANAGEMENT (ADMIN)\n   * ========================================================================\n   * Các chức năng quản lý người dùng dành cho admin\n   */\n  getAllUsers(params: {                                        // Lấy danh sách tất cả người dùng\n    search?: string;        // Tìm kiếm theo tên, email\n    role?: string;          // Lọc theo vai trò (admin/user)\n    page?: number;          // Trang hiện tại\n    limit?: number;         // Số items mỗi trang\n  }): Promise<{ users: User[]; total: number }>;\n  updateUserRole(id: string, role: 'admin' | 'user'): Promise<User>; // Thay đổi vai trò người dùng\n  deleteUser(id: string): Promise<void>;                       // Xóa tài khoản người dùng\n  \n  /**\n   * ========================================================================\n   * QUẢN LÝ THÔNG BÁO - NOTIFICATION MANAGEMENT\n   * ========================================================================\n   * Tạo và quản lý thông báo cho người dùng\n   */\n  getUserNotifications(userId: string): Promise<{ notifications: Notification[] }>; // Lấy thông báo của người dùng\n  createAnnouncement(notification: InsertNotification): Promise<Notification>;      // Tạo thông báo mới\n  getAllNotifications(): Promise<Notification[]>;              // Lấy tất cả thông báo (admin)\n  deleteNotification(notificationId: number): Promise<void>;   // Xóa thông báo\n}\n\n/**\n * ============================================================================\n * TRIỂN KHAI LỚP TRUY CẬP DỮ LIỆU - DATABASE STORAGE IMPLEMENTATION\n * ============================================================================\n * \n * Class này triển khai tất cả các phương thức trong interface IStorage\n * Sử dụng Drizzle ORM để thao tác với PostgreSQL database\n */\nexport class DatabaseStorage implements IStorage {\n  \n  /**\n   * ========================================================================\n   * THAO TÁC NGƯỜI DÙNG - USER OPERATIONS\n   * ========================================================================\n   */\n  \n  /**\n   * Lấy thông tin người dùng theo ID\n   * Bắt buộc cho hệ thống xác thực Replit Auth\n   */\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  /**\n   * Tạo mới hoặc cập nhật thông tin người dùng\n   * Sử dụng onConflictDoUpdate để xử lý trường hợp người dùng đã tồn tại\n   */\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  /**\n   * ========================================================================\n   * XÁC THỰC CỤC BỘ - LOCAL AUTHENTICATION\n   * ========================================================================\n   */\n  \n  /**\n   * Tìm người dùng theo tên đăng nhập (chuyển về lowercase để đảm bảo tính nhất quán)\n   */\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username.toLowerCase()));\n    return user;\n  }\n\n  /**\n   * Tạo tài khoản đăng nhập cục bộ mới\n   * Tự động tạo userId với prefix \"local_\" và chuyển username về lowercase\n   */\n  async createLocalUser(userData: {\n    username: string;\n    hashedPassword: string;\n    email: string;\n    firstName: string;\n    lastName: string;\n    role?: 'admin' | 'user';\n  }): Promise<User> {\n    const userId = `local_${userData.username.toLowerCase()}`;  // Tạo ID với prefix \"local_\"\n    const [user] = await db\n      .insert(users)\n      .values({\n        id: userId,\n        username: userData.username.toLowerCase(),  // Đảm bảo username luôn là lowercase\n        hashedPassword: userData.hashedPassword,\n        email: userData.email,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        role: userData.role || 'user',              // Mặc định là 'user' nếu không chỉ định\n        profileImageUrl: null,\n      })\n      .returning();\n    return user;\n  }\n\n  /**\n   * ========================================================================\n   * QUẢN LÝ SÁCH - BOOK MANAGEMENT\n   * ========================================================================\n   */\n  \n  /**\n   * Lấy danh sách sách với các bộ lọc và phân trang\n   * Hỗ trợ tìm kiếm theo nhiều trường và lọc theo thể loại, trạng thái\n   */\n  async getBooks(params: {\n    search?: string;\n    searchField?: string;\n    genre?: string;\n    status?: string;\n    page?: number;\n    limit?: number;\n  } = {}): Promise<{ books: BookWithAvailability[]; total: number }> {\n    const { page = 1, limit = 10 } = params;\n    const offset = (page - 1) * limit;  // Tính offset cho phân trang\n    \n    let whereConditions = [];\n    \n    // Xử lý tìm kiếm theo từ khóa\n    if (params.search) {\n      const searchValue = `%${params.search}%`;  // Thêm wildcard cho LIKE search\n      \n      // Tìm kiếm theo trường cụ thể\n      if (params.searchField === 'id') {\n        whereConditions.push(like(books.isbn, searchValue));  // Tìm theo ISBN\n      } else if (params.searchField === 'title') {\n        whereConditions.push(like(books.title, searchValue)); // Tìm theo tên sách\n      } else if (params.searchField === 'author') {\n        whereConditions.push(like(books.author, searchValue)); // Tìm theo tác giả\n      } else if (params.searchField === 'genre') {\n        whereConditions.push(like(books.genre, searchValue)); // Tìm theo thể loại\n      } else {\n        // Tìm kiếm mặc định trên tất cả các trường\n        whereConditions.push(\n          or(\n            like(books.title, searchValue),\n            like(books.author, searchValue),\n            like(books.isbn, searchValue),\n            like(books.genre, searchValue)\n          )\n        );\n      }\n    }\n    \n    // Lọc theo thể loại\n    if (params.genre && params.genre !== 'all') {\n      whereConditions.push(eq(books.genre, params.genre));\n    }\n    \n    // Kết hợp tất cả điều kiện WHERE\n    const whereClause = whereConditions.length > 0 ? and(...whereConditions) : undefined;\n    \n    // Thực hiện query song song để lấy dữ liệu và đếm tổng\n    const [booksResult, totalResult] = await Promise.all([\n      db\n        .select({\n          id: books.id,\n          title: books.title,\n          author: books.author,\n          isbn: books.isbn,\n          genre: books.genre,\n          quantity: books.quantity,\n          availableQuantity: books.availableQuantity,\n          description: books.description,\n          createdAt: books.createdAt,\n          updatedAt: books.updatedAt,\n        })\n        .from(books)\n        .where(whereClause)\n        .limit(limit)\n        .offset(offset)\n        .orderBy(desc(books.createdAt)),  // Sắp xếp theo ngày tạo mới nhất\n      \n      db\n        .select({ count: count() })\n        .from(books)\n        .where(whereClause)  // Đếm tổng số sách thỏa mãn điều kiện\n    ]);\n    \n    // Thêm thông tin trạng thái có sẵn cho mỗi cuốn sách\n    const booksWithAvailability: BookWithAvailability[] = booksResult.map(book => ({\n      ...book,\n      isAvailable: book.availableQuantity > 0,           // Còn sách để mượn\n      totalBorrowed: book.quantity - book.availableQuantity, // Số sách đang được mượn\n    }));\n    \n    // Áp dụng bộ lọc trạng thái nếu cần (available/borrowed)\n    const filteredBooks = params.status && params.status !== 'all' \n      ? booksWithAvailability.filter(book => {\n          if (params.status === 'available') return book.isAvailable;   // Chỉ sách có sẵn\n          if (params.status === 'borrowed') return !book.isAvailable;   // Chỉ sách đã hết\n          return true;\n        })\n      : booksWithAvailability;\n    \n    return {\n      books: filteredBooks,\n      total: totalResult[0].count,\n    };\n  }\n\n  /**\n   * Lấy thông tin sách theo ID\n   */\n  async getBookById(id: number): Promise<Book | undefined> {\n    const [book] = await db.select().from(books).where(eq(books.id, id));\n    return book;\n  }\n\n  /**\n   * Lấy thông tin sách theo mã ISBN (dùng để kiểm tra trùng lặp)\n   */\n  async getBookByIsbn(isbn: string): Promise<Book | undefined> {\n    const [book] = await db.select().from(books).where(eq(books.isbn, isbn));\n    return book;\n  }\n\n  /**\n   * Thêm sách mới vào thư viện\n   * Logic thông minh: Nếu ISBN đã tồn tại, cộng thêm số lượng thay vì tạo mới\n   */\n  async createBook(book: InsertBook): Promise<Book> {\n    // Kiểm tra xem sách với ISBN này đã tồn tại chưa\n    const existingBook = await this.getBookByIsbn(book.isbn);\n    \n    if (existingBook) {\n      // Nếu sách đã tồn tại, cộng thêm số lượng thay vì tạo bản ghi mới\n      const addQuantity = book.quantity || 1;\n      const newQuantity = existingBook.quantity + addQuantity;\n      const newAvailableQuantity = existingBook.availableQuantity + addQuantity;\n      \n      const [updatedBook] = await db\n        .update(books)\n        .set({\n          quantity: newQuantity,                   // Cập nhật tổng số lượng\n          availableQuantity: newAvailableQuantity, // Cập nhật số lượng có sẵn\n          updatedAt: new Date(),\n        })\n        .where(eq(books.id, existingBook.id))\n        .returning();\n      \n      return updatedBook;\n    } else {\n      // Nếu sách chưa tồn tại, tạo bản ghi mới\n      const [newBook] = await db\n        .insert(books)\n        .values({\n          ...book,\n          availableQuantity: book.quantity,  // availableQuantity bằng quantity ban đầu\n        })\n        .returning();\n      return newBook;\n    }\n  }\n\n  /**\n   * Cập nhật thông tin sách\n   */\n  async updateBook(id: number, bookData: Partial<InsertBook>): Promise<Book> {\n    const [updatedBook] = await db\n      .update(books)\n      .set({\n        ...bookData,\n        updatedAt: new Date(),\n      })\n      .where(eq(books.id, id))\n      .returning();\n    return updatedBook;\n  }\n\n  /**\n   * Xóa sách khỏi thư viện\n   */\n  async deleteBook(id: number): Promise<void> {\n    await db.delete(books).where(eq(books.id, id));\n  }\n\n  /**\n   * ========================================================================\n   * QUẢN LÝ MƯỢN/TRẢ SÁCH - BORROWING MANAGEMENT\n   * ========================================================================\n   */\n  \n  /**\n   * Lấy danh sách giao dịch mượn sách với các bộ lọc\n   * Join với bảng users và books để lấy thông tin chi tiết\n   */\n  async getBorrowings(params: {\n    userId?: string;\n    status?: string;\n    page?: number;\n    limit?: number;\n  } = {}): Promise<{ borrowings: BorrowingWithDetails[]; total: number }> {\n    const { page = 1, limit = 10 } = params;\n    const offset = (page - 1) * limit;  // Tính offset cho phân trang\n    \n    let whereConditions = [];\n    \n    // Lọc theo người dùng cụ thể\n    if (params.userId) {\n      whereConditions.push(eq(borrowings.userId, params.userId));\n    }\n    \n    // Lọc theo trạng thái (active/returned/overdue)\n    if (params.status && params.status !== 'all') {\n      whereConditions.push(eq(borrowings.status, params.status as any));\n    }\n    \n    const whereClause = whereConditions.length > 0 ? and(...whereConditions) : undefined;\n    \n    // Thực hiện query song song để lấy danh sách và đếm tổng\n    const [borrowingsResult, totalResult] = await Promise.all([\n      db\n        .select()\n        .from(borrowings)\n        .leftJoin(users, eq(borrowings.userId, users.id))     // Join thông tin người mượn\n        .leftJoin(books, eq(borrowings.bookId, books.id))     // Join thông tin sách\n        .where(whereClause)\n        .limit(limit)\n        .offset(offset)\n        .orderBy(desc(borrowings.createdAt)),  // Sắp xếp theo ngày mượn mới nhất\n      \n      db\n        .select({ count: count() })\n        .from(borrowings)\n        .where(whereClause)  // Đếm tổng số giao dịch thỏa mãn điều kiện\n    ]);\n    \n    // Kết hợp dữ liệu từ các bảng thành đối tượng BorrowingWithDetails\n    const borrowingsWithDetails: BorrowingWithDetails[] = borrowingsResult.map(result => ({\n      ...result.borrowings,\n      user: result.users!,   // Thông tin người mượn\n      book: result.books!,   // Thông tin sách được mượn\n    }));\n    \n    return {\n      borrowings: borrowingsWithDetails,\n      total: totalResult[0].count,\n    };\n  }\n\n  /**\n   * Lấy chi tiết giao dịch mượn sách theo ID\n   * Bao gồm thông tin đầy đủ người mượn và sách\n   */\n  async getBorrowingById(id: number): Promise<BorrowingWithDetails | undefined> {\n    const [result] = await db\n      .select()\n      .from(borrowings)\n      .leftJoin(users, eq(borrowings.userId, users.id))     // Join thông tin người mượn\n      .leftJoin(books, eq(borrowings.bookId, books.id))     // Join thông tin sách\n      .where(eq(borrowings.id, id));\n    \n    if (!result) return undefined;\n    \n    return {\n      ...result.borrowings,\n      user: result.users!,   // Thông tin người mượn\n      book: result.books!,   // Thông tin sách được mượn\n    };\n  }\n\n  /**\n   * Tạo giao dịch mượn sách mới\n   * Tự động giảm số lượng sách có sẵn trong kho\n   */\n  async createBorrowing(borrowing: InsertBorrowing): Promise<Borrowing> {\n    const [newBorrowing] = await db\n      .insert(borrowings)\n      .values(borrowing)\n      .returning();\n    \n    // Cập nhật số lượng sách có sẵn (giảm 1)\n    await db\n      .update(books)\n      .set({\n        availableQuantity: sql`${books.availableQuantity} - 1`,  // Sử dụng SQL raw để atomic update\n        updatedAt: new Date(),\n      })\n      .where(eq(books.id, borrowing.bookId));\n    \n    return newBorrowing;\n  }\n\n  /**\n   * Cập nhật trạng thái giao dịch mượn sách (trả sách hoặc quá hạn)\n   * Nếu trả sách, tự động tăng số lượng sách có sẵn\n   */\n  async updateBorrowingStatus(id: number, status: 'returned' | 'overdue', returnDate?: Date): Promise<Borrowing> {\n    const borrowing = await this.getBorrowingById(id);\n    if (!borrowing) throw new Error('Borrowing not found');\n    \n    const [updatedBorrowing] = await db\n      .update(borrowings)\n      .set({\n        status,\n        returnDate,\n        updatedAt: new Date(),\n      })\n      .where(eq(borrowings.id, id))\n      .returning();\n    \n    // Nếu trả sách, cập nhật số lượng có sẵn (tăng 1)\n    if (status === 'returned') {\n      await db\n        .update(books)\n        .set({\n          availableQuantity: sql`${books.availableQuantity} + 1`,  // Sử dụng SQL raw để atomic update\n          updatedAt: new Date(),\n        })\n        .where(eq(books.id, borrowing.bookId));\n    }\n    \n    return updatedBorrowing;\n  }\n\n  /**\n   * ========================================================================\n   * NHẬT KÝ HOẠT ĐỘNG - ACTIVITY LOGGING\n   * ========================================================================\n   */\n  \n  /**\n   * Lấy danh sách nhật ký hoạt động với phân trang\n   * Join với bảng users để lấy thông tin người thực hiện\n   */\n  async getActivityLogs(params: {\n    userId?: string;\n    page?: number;\n    limit?: number;\n  } = {}): Promise<{ logs: (ActivityLog & { user: User })[]; total: number }> {\n    const { page = 1, limit = 20 } = params;  // Mặc định 20 items mỗi trang cho activity logs\n    const offset = (page - 1) * limit;\n    \n    // Lọc theo người dùng cụ thể nếu có\n    const whereClause = params.userId ? eq(activityLogs.userId, params.userId) : undefined;\n    \n    const [logsResult, totalResult] = await Promise.all([\n      db\n        .select()\n        .from(activityLogs)\n        .leftJoin(users, eq(activityLogs.userId, users.id))\n        .where(whereClause)\n        .limit(limit)\n        .offset(offset)\n        .orderBy(desc(activityLogs.timestamp)),\n      \n      db\n        .select({ count: count() })\n        .from(activityLogs)\n        .where(whereClause)\n    ]);\n    \n    const logsWithUser = logsResult.map(result => ({\n      ...result.activity_logs,\n      user: result.users!,\n    }));\n    \n    return {\n      logs: logsWithUser,\n      total: totalResult[0].count,\n    };\n  }\n\n  async createActivityLog(log: InsertActivityLog): Promise<ActivityLog> {\n    const [newLog] = await db\n      .insert(activityLogs)\n      .values(log)\n      .returning();\n    return newLog;\n  }\n\n  // Dashboard statistics\n  async getDashboardStats(): Promise<{\n    totalBooks: number;\n    totalUsers: number;\n    activeBorrowings: number;\n    overdueBorrowings: number;\n    popularBooks: { book: Book; borrowCount: number }[];\n  }> {\n    const [\n      totalBooksResult,\n      totalUsersResult,\n      activeBorrowingsResult,\n      overdueBorrowingsResult,\n      popularBooksResult,\n    ] = await Promise.all([\n      db.select({ count: count() }).from(books),\n      db.select({ count: count() }).from(users),\n      db.select({ count: count() }).from(borrowings).where(eq(borrowings.status, 'active')),\n      db.select({ count: count() }).from(borrowings).where(eq(borrowings.status, 'overdue')),\n      db\n        .select({\n          book: books,\n          borrowCount: count(borrowings.id),\n        })\n        .from(books)\n        .leftJoin(borrowings, eq(books.id, borrowings.bookId))\n        .groupBy(books.id)\n        .orderBy(desc(count(borrowings.id)))\n        .limit(5),\n    ]);\n    \n    return {\n      totalBooks: totalBooksResult[0].count,\n      totalUsers: totalUsersResult[0].count,\n      activeBorrowings: activeBorrowingsResult[0].count,\n      overdueBorrowings: overdueBorrowingsResult[0].count,\n      popularBooks: popularBooksResult.map(result => ({\n        book: result.book,\n        borrowCount: result.borrowCount,\n      })),\n    };\n  }\n\n  // User management\n  async getAllUsers(params: {\n    search?: string;\n    role?: string;\n    page?: number;\n    limit?: number;\n  } = {}): Promise<{ users: User[]; total: number }> {\n    const { page = 1, limit = 10 } = params;\n    const offset = (page - 1) * limit;\n    \n    let whereConditions = [];\n    \n    if (params.search) {\n      whereConditions.push(\n        or(\n          like(users.email, `%${params.search}%`),\n          like(users.firstName, `%${params.search}%`),\n          like(users.lastName, `%${params.search}%`)\n        )\n      );\n    }\n    \n    if (params.role && params.role !== 'all') {\n      whereConditions.push(eq(users.role, params.role as any));\n    }\n    \n    const whereClause = whereConditions.length > 0 ? and(...whereConditions) : undefined;\n    \n    const [usersResult, totalResult] = await Promise.all([\n      db\n        .select()\n        .from(users)\n        .where(whereClause)\n        .limit(limit)\n        .offset(offset)\n        .orderBy(desc(users.createdAt)),\n      \n      db\n        .select({ count: count() })\n        .from(users)\n        .where(whereClause)\n    ]);\n    \n    return {\n      users: usersResult,\n      total: totalResult[0].count,\n    };\n  }\n\n  async updateUserRole(id: string, role: 'admin' | 'user'): Promise<User> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({\n        role,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, id))\n      .returning();\n    return updatedUser;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await db\n      .delete(users)\n      .where(eq(users.id, id));\n  }\n\n  // Notification operations\n  async getUserNotifications(userId: string): Promise<{ notifications: Notification[] }> {\n    // Get notifications for this user (both global announcements and user-specific)\n    const userNotifications = await db\n      .select()\n      .from(notifications)\n      .where(\n        or(\n          eq(notifications.userId, userId), // User-specific notifications\n          isNull(notifications.userId)   // Global announcements (userId is null)\n        )\n      )\n      .orderBy(desc(notifications.createdAt));\n\n    return {\n      notifications: userNotifications,\n    };\n  }\n\n  async createAnnouncement(notificationData: InsertNotification): Promise<Notification> {\n    const [notification] = await db\n      .insert(notifications)\n      .values(notificationData)\n      .returning();\n    return notification;\n  }\n\n  async getAllNotifications(): Promise<Notification[]> {\n    // Get all notifications for admin management\n    const allNotifications = await db\n      .select()\n      .from(notifications)\n      .orderBy(desc(notifications.createdAt));\n    return allNotifications;\n  }\n\n  async deleteNotification(notificationId: number): Promise<void> {\n    await db\n      .delete(notifications)\n      .where(eq(notifications.id, notificationId));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":28246},"server/vite.ts":{"content":"/**\n * ========================================================================\n * VITE CONFIGURATION - CẤU HÌNH VITE  \n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Module xử lý cấu hình Vite dev server cho development và static file serving\n * cho production. Đảm bảo hot module replacement (HMR) hoạt động tốt.\n */\nimport express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\n// Logger của Vite cho console output\nconst viteLogger = createLogger();\n\n/**\n * ========================================================================\n * LOGGING UTILITIES - TIỆN ÍCH LOGGING\n * ========================================================================\n */\n\n/**\n * Utility function để log với timestamp và source\n * Sử dụng trong cả development và production\n */\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\n/**\n * ========================================================================\n * DEVELOPMENT SERVER SETUP - THIẾT LẬP DEV SERVER\n * ========================================================================\n */\n\n/**\n * Setup Vite dev server với Hot Module Replacement (HMR)\n * Chỉ sử dụng trong development environment\n * \n * Features:\n * - HMR cho fast refresh khi code thay đổi\n * - Transform TypeScript và React JSX on-the-fly\n * - Cache busting cho index.html với nanoid\n */\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,        // Sử dụng Vite như middleware trong Express\n    hmr: { server },             // Enable HMR sử dụng existing HTTP server\n    allowedHosts: true as const, // Cho phép tất cả hosts (cần thiết cho Replit)\n  };\n\n  // Tạo Vite dev server với config tùy chỉnh\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,           // Sử dụng inline config thay vì file\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);         // Exit on critical errors\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",           // Custom app thay vì SPA standard\n  });\n\n  // Đăng ký Vite middlewares để xử lý assets và HMR\n  app.use(vite.middlewares);\n  \n  // Catch-all route để serve React app cho tất cả non-API routes\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // Luôn đọc index.html từ disk để catch changes ngay lập tức\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      \n      // Cache busting cho main.tsx để đảm bảo browser load version mới\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      \n      // Transform HTML qua Vite để inject HMR client code\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      // Fix stack trace để hiển thị đúng source location\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\n/**\n * ========================================================================\n * PRODUCTION STATIC SERVING - PHỤC VỤ STATIC FILES PRODUCTION\n * ========================================================================\n */\n\n/**\n * Serve static files đã được build cho production\n * Fallback về index.html cho SPA routing (client-side routing)\n */\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  // Kiểm tra thư mục build có tồn tại không\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  // Serve static assets (CSS, JS, images, etc.)\n  app.use(express.static(distPath));\n\n  // SPA fallback: serve index.html cho tất cả routes không match files\n  // Cần thiết cho client-side routing (React Router)\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":4840},"shared/schema.ts":{"content":"/**\n * ============================================================================\n * LƯỢC ĐỒ CƠ SỞ DỮ LIỆU - LIBRARY MANAGEMENT SYSTEM\n * ============================================================================\n * \n * File này định nghĩa toàn bộ cấu trúc cơ sở dữ liệu cho hệ thống quản lý thư viện\n * Bao gồm: Bảng dữ liệu, quan hệ, schema xác thực và các kiểu dữ liệu TypeScript\n * \n * Các bảng chính:\n * - sessions: Quản lý phiên đăng nhập người dùng\n * - users: Thông tin người dùng và phân quyền\n * - books: Danh mục sách trong thư viện\n * - borrowings: Lịch sử mượn/trả sách\n * - activityLogs: Nhật ký hoạt động hệ thống\n * - notifications: Thông báo và thông điệp\n */\n\nimport { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  pgEnum,\n  serial,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n/**\n * ============================================================================\n * BẢNG SESSIONS - QUẢN LÝ PHIÊN ĐĂNG NHẬP\n * ============================================================================\n * \n * Bảng này lưu trữ thông tin phiên đăng nhập của người dùng\n * Bắt buộc phải có cho hệ thống xác thực Replit Auth\n */\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),              // Mã định danh phiên đăng nhập duy nhất\n    sess: jsonb(\"sess\").notNull(),                 // Dữ liệu phiên đăng nhập (JSON)\n    expire: timestamp(\"expire\").notNull(),         // Thời gian hết hạn phiên đăng nhập\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)], // Chỉ mục để tối ưu truy vấn theo thời gian hết hạn\n);\n\n/**\n * ============================================================================\n * ENUM VÀI TRÒ NGƯỜI DÙNG\n * ============================================================================\n */\nexport const userRoleEnum = pgEnum('user_role', ['admin', 'user']); // admin: Quản trị viên, user: Người dùng thường\n\n/**\n * ============================================================================\n * BẢNG USERS - THÔNG TIN NGƯỜI DÙNG\n * ============================================================================\n * \n * Bảng này chứa thông tin chi tiết của tất cả người dùng trong hệ thống\n * Hỗ trợ cả xác thực Replit Auth và xác thực cục bộ\n */\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`), // Mã định danh người dùng (UUID tự động tạo)\n  email: varchar(\"email\").unique(),                               // Địa chỉ email (duy nhất)\n  firstName: varchar(\"first_name\"),                               // Tên\n  lastName: varchar(\"last_name\"),                                 // Họ và tên đệm\n  profileImageUrl: varchar(\"profile_image_url\"),                  // URL ảnh đại diện\n  role: userRoleEnum(\"role\").default('user').notNull(),           // Vai trò: admin hoặc user\n  username: varchar(\"username\").unique(),                         // Tên đăng nhập (cho xác thực cục bộ)\n  hashedPassword: varchar(\"hashed_password\"),                     // Mật khẩu đã mã hóa (cho xác thực cục bộ)\n  createdAt: timestamp(\"created_at\").defaultNow(),                // Thời gian tạo tài khoản\n  updatedAt: timestamp(\"updated_at\").defaultNow(),                // Thời gian cập nhật cuối cùng\n});\n\n/**\n * ============================================================================\n * BẢNG BOOKS - DANH MỤC SÁCH THƯ VIỆN\n * ============================================================================\n * \n * Bảng này chứa thông tin về tất cả sách trong thư viện\n * Theo dõi số lượng sách có sẵn và đã mượn\n */\nexport const books = pgTable(\"books\", {\n  id: serial(\"id\").primaryKey(),                                 // Mã định danh sách (tự động tăng)\n  title: varchar(\"title\", { length: 255 }).notNull(),            // Tên sách\n  author: varchar(\"author\", { length: 255 }).notNull(),          // Tác giả\n  isbn: varchar(\"isbn\", { length: 20 }).unique().notNull(),      // Mã ISBN duy nhất\n  genre: varchar(\"genre\", { length: 100 }).notNull(),            // Thể loại sách\n  quantity: integer(\"quantity\").notNull().default(1),            // Tổng số lượng sách\n  availableQuantity: integer(\"available_quantity\").notNull().default(1), // Số lượng sách có sẵn để mượn\n  description: text(\"description\"),                              // Mô tả chi tiết sách\n  createdAt: timestamp(\"created_at\").defaultNow(),               // Thời gian thêm sách vào hệ thống\n  updatedAt: timestamp(\"updated_at\").defaultNow(),               // Thời gian cập nhật cuối cùng\n});\n\n/**\n * ============================================================================\n * ENUM TRẠNG THÁI MƯỢN SÁCH\n * ============================================================================\n */\nexport const borrowingStatusEnum = pgEnum('borrowing_status', [\n  'active',   // Đang mượn\n  'returned', // Đã trả\n  'overdue'   // Quá hạn\n]);\n\n/**\n * ============================================================================\n * BẢNG BORROWINGS - LỊCH SỬ MƯỢN/TRẢ SÁCH\n * ============================================================================\n * \n * Bảng này ghi lại tất cả các giao dịch mượn sách trong hệ thống\n * Theo dõi người mượn, sách được mượn, thời gian và trạng thái\n */\nexport const borrowings = pgTable(\"borrowings\", {\n  id: serial(\"id\").primaryKey(),                                 // Mã định danh giao dịch mượn sách\n  userId: varchar(\"user_id\").notNull().references(() => users.id), // Mã người dùng mượn sách\n  bookId: integer(\"book_id\").notNull().references(() => books.id), // Mã sách được mượn\n  borrowDate: timestamp(\"borrow_date\").defaultNow().notNull(),   // Ngày mượn sách\n  dueDate: timestamp(\"due_date\").notNull(),                      // Ngày hạn trả sách\n  returnDate: timestamp(\"return_date\"),                          // Ngày trả sách thực tế (null nếu chưa trả)\n  status: borrowingStatusEnum(\"status\").default('active').notNull(), // Trạng thái mượn sách\n  createdAt: timestamp(\"created_at\").defaultNow(),               // Thời gian tạo bản ghi\n  updatedAt: timestamp(\"updated_at\").defaultNow(),               // Thời gian cập nhật cuối cùng\n});\n\n/**\n * ============================================================================\n * BẢNG ACTIVITY_LOGS - NHẬT KÝ HOẠT ĐỘNG HỆ THỐNG\n * ============================================================================\n * \n * Bảng này ghi lại tất cả hoạt động của người dùng trong hệ thống\n * Dùng để theo dõi, audit và phân tích hành vi người dùng\n */\nexport const activityLogs = pgTable(\"activity_logs\", {\n  id: serial(\"id\").primaryKey(),                                 // Mã định danh nhật ký\n  userId: varchar(\"user_id\").notNull().references(() => users.id), // Người dùng thực hiện hành động\n  action: varchar(\"action\", { length: 100 }).notNull(),          // Loại hành động (VD: \"BORROW_BOOK\", \"RETURN_BOOK\")\n  details: text(\"details\").notNull(),                            // Chi tiết mô tả hành động\n  entityType: varchar(\"entity_type\", { length: 50 }),           // Loại đối tượng bị tác động (VD: \"book\", \"user\")\n  entityId: varchar(\"entity_id\", { length: 50 }),               // Mã đối tượng bị tác động\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),      // Thời gian thực hiện hành động\n});\n\n/**\n * ============================================================================\n * BẢNG NOTIFICATIONS - THÔNG BÁO VÀ THÔNG ĐIỆP\n * ============================================================================\n * \n * Bảng này quản lý các thông báo gửi đến người dùng\n * Hỗ trợ cả thông báo cá nhân và thông báo toàn hệ thống\n */\nexport const notifications = pgTable(\"notifications\", {\n  id: serial(\"id\").primaryKey(),                                 // Mã định danh thông báo\n  title: varchar(\"title\", { length: 255 }).notNull(),            // Tiêu đề thông báo\n  content: text(\"content\").notNull(),                            // Nội dung thông báo\n  type: varchar(\"type\", { length: 50 }).default('announcement').notNull(), // Loại thông báo\n  createdById: varchar(\"created_by_id\").notNull().references(() => users.id), // Người tạo thông báo (admin)\n  userId: varchar(\"user_id\").references(() => users.id),        // Người nhận (null = thông báo toàn hệ thống)\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),     // Thời gian tạo thông báo\n  updatedAt: timestamp(\"updated_at\").defaultNow(),               // Thời gian cập nhật cuối cùng\n});\n\n/**\n * ============================================================================\n * QUAN HỆ GIỮA CÁC BẢNG (FOREIGN KEY RELATIONSHIPS)\n * ============================================================================\n * \n * Các định nghĩa này thiết lập mối quan hệ giữa các bảng trong cơ sở dữ liệu\n * Cho phép Drizzle ORM tự động join và lấy dữ liệu liên quan\n */\n\n// Quan hệ từ bảng Users: Một người dùng có thể có nhiều...\nexport const usersRelations = relations(users, ({ many }) => ({\n  borrowings: many(borrowings),              // Nhiều lần mượn sách\n  activityLogs: many(activityLogs),          // Nhiều hoạt động được ghi log\n  notifications: many(notifications),        // Nhiều thông báo nhận được\n  createdNotifications: many(notifications, { relationName: \"creator\" }), // Nhiều thông báo đã tạo (với vai trò admin)\n}));\n\n// Quan hệ từ bảng Books: Một cuốn sách có thể có nhiều...\nexport const booksRelations = relations(books, ({ many }) => ({\n  borrowings: many(borrowings),              // Nhiều lần được mượn\n}));\n\n// Quan hệ từ bảng Borrowings: Mỗi giao dịch mượn sách thuộc về...\nexport const borrowingsRelations = relations(borrowings, ({ one }) => ({\n  user: one(users, {                        // Một người dùng cụ thể\n    fields: [borrowings.userId],\n    references: [users.id],\n  }),\n  book: one(books, {                        // Một cuốn sách cụ thể\n    fields: [borrowings.bookId],\n    references: [books.id],\n  }),\n}));\n\n// Quan hệ từ bảng Activity Logs: Mỗi nhật ký hoạt động thuộc về...\nexport const activityLogsRelations = relations(activityLogs, ({ one }) => ({\n  user: one(users, {                        // Một người dùng cụ thể (người thực hiện hành động)\n    fields: [activityLogs.userId],\n    references: [users.id],\n  }),\n}));\n\n// Quan hệ từ bảng Notifications: Mỗi thông báo có...\nexport const notificationsRelations = relations(notifications, ({ one }) => ({\n  user: one(users, {                        // Người nhận thông báo (null nếu là thông báo toàn hệ thống)\n    fields: [notifications.userId],\n    references: [users.id],\n  }),\n  createdBy: one(users, {                   // Người tạo thông báo (thường là admin)\n    fields: [notifications.createdById],\n    references: [users.id],\n    relationName: \"creator\",\n  }),\n}));\n\n/**\n * ============================================================================\n * ZOD SCHEMAS CHO XÁC THỰC DỮ LIỆU INPUT\n * ============================================================================\n * \n * Các schema này được sử dụng để xác thực dữ liệu đầu vào từ frontend\n * Loại bỏ các trường tự động sinh (id, timestamps) khỏi validation\n */\n\n// Schema cho việc tạo/cập nhật người dùng (loại bỏ các trường tự động sinh)\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,              // ID được tự động sinh bằng UUID\n  createdAt: true,       // Timestamp tự động khi tạo\n  updatedAt: true,       // Timestamp tự động khi cập nhật\n});\n\n// Schema cho việc tạo sách mới (availableQuantity được tính tự động)\nexport const insertBookSchema = createInsertSchema(books).omit({\n  id: true,              // ID được tự động tăng\n  createdAt: true,       // Timestamp tự động khi tạo\n  updatedAt: true,       // Timestamp tự động khi cập nhật\n  availableQuantity: true, // Được set bằng quantity khi tạo mới\n});\n\n// Schema cho việc tạo giao dịch mượn sách mới\nexport const insertBorrowingSchema = createInsertSchema(borrowings).omit({\n  id: true,              // ID được tự động tăng\n  createdAt: true,       // Timestamp tự động khi tạo\n  updatedAt: true,       // Timestamp tự động khi cập nhật\n  borrowDate: true,      // Được set tự động khi tạo\n  status: true,          // Mặc định là 'active'\n});\n\n// Schema cho việc tạo nhật ký hoạt động\nexport const insertActivityLogSchema = createInsertSchema(activityLogs).omit({\n  id: true,              // ID được tự động tăng\n  timestamp: true,       // Timestamp tự động khi tạo\n});\n\n// Schema cho việc tạo thông báo mới\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,              // ID được tự động tăng\n  createdAt: true,       // Timestamp tự động khi tạo\n  updatedAt: true,       // Timestamp tự động khi cập nhật\n});\n\n/**\n * ============================================================================\n * TYPESCRIPT TYPES - ĐỊNH NGHĨA KIỂU DỮ LIỆU\n * ============================================================================\n * \n * Các kiểu dữ liệu TypeScript được tự động sinh từ schema Drizzle\n * Đảm bảo type safety trong toàn bộ ứng dụng\n */\n\n// Kiểu dữ liệu cho bảng Users\nexport type UpsertUser = typeof users.$inferInsert;    // Dữ liệu để insert/update user\nexport type User = typeof users.$inferSelect;          // Dữ liệu user đầy đủ từ DB\nexport type InsertUser = z.infer<typeof insertUserSchema>; // Dữ liệu user từ form (đã validate)\n\n// Kiểu dữ liệu cho bảng Books\nexport type Book = typeof books.$inferSelect;          // Dữ liệu sách đầy đủ từ DB\nexport type InsertBook = z.infer<typeof insertBookSchema>; // Dữ liệu sách từ form (đã validate)\n\n// Kiểu dữ liệu cho bảng Borrowings\nexport type Borrowing = typeof borrowings.$inferSelect; // Dữ liệu giao dịch mượn từ DB\nexport type InsertBorrowing = z.infer<typeof insertBorrowingSchema>; // Dữ liệu tạo giao dịch mới\n\n// Kiểu dữ liệu cho bảng Activity Logs\nexport type ActivityLog = typeof activityLogs.$inferSelect; // Dữ liệu nhật ký từ DB\nexport type InsertActivityLog = z.infer<typeof insertActivityLogSchema>; // Dữ liệu tạo log mới\n\n// Kiểu dữ liệu cho bảng Notifications\nexport type Notification = typeof notifications.$inferSelect; // Dữ liệu thông báo từ DB\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>; // Dữ liệu tạo thông báo mới\n\n/**\n * ============================================================================\n * KIỂU DỮ LIỆU MỞ RỘNG - TÍCH HỢP THÔNG TIN LIÊN QUAN\n * ============================================================================\n * \n * Các kiểu dữ liệu này kết hợp thông tin từ nhiều bảng\n * Dùng cho API responses và hiển thị trên giao diện\n */\n\n// Giao dịch mượn sách với thông tin chi tiết người dùng và sách\nexport type BorrowingWithDetails = Borrowing & {\n  user: User;            // Thông tin đầy đủ người mượn\n  book: Book;            // Thông tin đầy đủ sách được mượn\n};\n\n// Thông tin sách với trạng thái có sẵn để mượn\nexport type BookWithAvailability = Book & {\n  isAvailable: boolean;  // true nếu còn sách để mượn\n  totalBorrowed: number; // Số lượng sách đang được mượn\n};\n","size_bytes":16684},"client/src/App.tsx":{"content":"/**\n * ========================================================================\n * MAIN APPLICATION COMPONENT - COMPONENT ỨNG DỤNG CHÍNH\n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Entry point chính của React application. Xử lý:\n * - Authentication routing (login/dashboard flow)\n * - Layout structure với sidebar và header\n * - Global providers cho TanStack Query, Tooltips, Toasts\n * - Client-side routing với wouter\n */\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Books from \"@/pages/books\";\nimport Borrowings from \"@/pages/borrowings\";\nimport Users from \"@/pages/users\";\nimport Activity from \"@/pages/activity\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { Header } from \"@/components/header\";\n\n/**\n * ========================================================================\n * ROUTER COMPONENT - COMPONENT ĐIỀU HƯỚNG\n * ========================================================================\n */\n\n/**\n * Main routing component xử lý authentication flow và page navigation\n * \n * Logic flow:\n * 1. Kiểm tra authentication status qua useAuth hook\n * 2. Loading state → hiển thị loading spinner\n * 3. Không authenticate → redirect đến login page\n * 4. Đã authenticate → hiển thị main app layout với sidebar + content\n * \n * Layout structure:\n * - Sidebar: Navigation menu ở bên trái\n * - Header: Top bar với user info và logout\n * - Main content: Page content dựa trên route\n */\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Loading state trong quá trình kiểm tra authentication\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  // Chưa đăng nhập → hiển thị login page cho tất cả routes\n  if (!isAuthenticated) {\n    return (\n      <Switch>\n        <Route path=\"/\" component={Login} />\n        <Route component={Login} />              {/* Catch-all fallback */}\n      </Switch>\n    );\n  }\n\n  // Đã đăng nhập → hiển thị main application layout\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />                                {/* Left sidebar navigation */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        <Header />                               {/* Top header bar */}\n        <main className=\"flex-1 overflow-auto p-6\">\n          <Switch>\n            <Route path=\"/\" component={Dashboard} />\n            <Route path=\"/books\" component={Books} />\n            <Route path=\"/borrowings\" component={Borrowings} />\n            <Route path=\"/users\" component={Users} />\n            <Route path=\"/activity\" component={Activity} />\n            <Route component={NotFound} />       {/* 404 fallback */}\n          </Switch>\n        </main>\n      </div>\n    </div>\n  );\n}\n\n/**\n * ========================================================================\n * ROOT APP COMPONENT - COMPONENT GỐC ỨNG DỤNG\n * ========================================================================\n */\n\n/**\n * Root component của toàn bộ ứng dụng, thiết lập các global providers\n * \n * Provider hierarchy (từ ngoài vào trong):\n * 1. QueryClientProvider: TanStack Query cho server state management\n * 2. TooltipProvider: Shadcn UI tooltip functionality\n * 3. Toaster: Toast notifications từ shadcn/ui\n * 4. Router: Main application routing và authentication\n * \n * Các provider này được share xuống tất cả child components\n */\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />                               {/* Global toast container */}\n        <Router />                                {/* Main routing component */}\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4431},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(214, 100%, 40%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 47.4%, 11.2%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(160, 84%, 39%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(214, 100%, 40%);\n  --chart-1: hsl(214, 100%, 40%);\n  --chart-2: hsl(160, 84%, 39%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(214, 100%, 40%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(160, 84%, 39%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(214, 100%, 40%);\n  --font-sans: \"Inter\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(214, 100%, 40% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(214, 100%, 40% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(214, 100%, 40% / 0.00), 0px 1px 2px -1px hsl(214, 100%, 40% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(214, 100%, 40% / 0.00), 0px 1px 2px -1px hsl(214, 100%, 40% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(214, 100%, 40% / 0.00), 0px 2px 4px -1px hsl(214, 100%, 40% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(214, 100%, 40% / 0.00), 0px 4px 6px -1px hsl(214, 100%, 40% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(214, 100%, 40% / 0.00), 0px 8px 10px -1px hsl(214, 100%, 40% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(214, 100%, 40% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(214, 100%, 40%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(195, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(222.2, 47.4%, 11.2%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(160, 84%, 39%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(210, 5.2632%, 14.9020%);\n  --ring: hsl(214, 100%, 40%);\n  --chart-1: hsl(214, 100%, 40%);\n  --chart-2: hsl(160, 84%, 39%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 0%);\n  --sidebar-foreground: hsl(200, 6.6667%, 91.1765%);\n  --sidebar-primary: hsl(214, 100%, 40%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(160, 84%, 39%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(210, 5.2632%, 14.9020%);\n  --sidebar-ring: hsl(214, 100%, 40%);\n}\n\n* {\n  border-color: hsl(var(--border));\n}\n\nbody {\n  background-color: hsl(var(--background));\n  color: hsl(var(--foreground));\n  font-feature-settings: \"rlig\" 1, \"calt\" 1;\n}\n\n@layer base {\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    font-weight: 600;\n  }\n}\n","size_bytes":3830},"client/src/main.tsx":{"content":"/**\n * ========================================================================\n * REACT ENTRY POINT - ĐIỂM VÀO REACT APPLICATION\n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Entry point chính để mount React application vào DOM.\n * Sử dụng React 18's createRoot API thay vì legacy ReactDOM.render.\n */\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";                    // Global CSS với Tailwind styles\n\n// Mount React app vào #root element trong index.html\n// Non-null assertion (!) vì chúng ta chắc chắn #root element tồn tại\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":768},"client/src/components/header.tsx":{"content":"/**\n * ========================================================================\n * HEADER COMPONENT - COMPONENT HEADER\n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Header component hiển thị thanh tiêu đề trên cùng với:\n * - Page title động theo route hiện tại\n * - Notifications button và modal management\n * \n * Features:\n * - Auto-update page title theo current location\n * - Notifications access via bell icon\n * - Modal state management cho notifications\n */\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Bell } from \"lucide-react\";\nimport NotificationsModal from \"@/components/modals/notifications-modal\";\n\n/**\n * Header component cho top navigation bar\n * \n * Responsibilities:\n * - Hiển thị page title phù hợp với route\n * - Provide notifications access button\n * - Manage notifications modal state\n */\nexport function Header() {\n  const [location] = useLocation();\n  const [showNotifications, setShowNotifications] = useState(false);\n\n  /**\n   * Lấy page title phù hợp theo current route\n   * Mapping từ URL path sang user-friendly titles\n   */\n  const getPageTitle = () => {\n    switch (location) {\n      case \"/\":\n        return \"Dashboard\";\n      case \"/books\":\n        return \"Books Management\";\n      case \"/borrowings\":\n        return \"Borrowing Management\";\n      case \"/users\":\n        return \"User Management\";\n      case \"/activity\":\n        return \"Activity Log\";\n      default:\n        return \"Library Management\";\n    }\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4\" data-testid=\"header\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <h2 className=\"text-xl font-semibold text-foreground\" data-testid=\"text-page-title\">\n            {getPageTitle()}\n          </h2>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {/* Notifications */}\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            data-testid=\"button-notifications\"\n            onClick={() => setShowNotifications(true)}\n          >\n            <Bell className=\"w-5 h-5\" />\n          </Button>\n        </div>\n      </div>\n\n      <NotificationsModal \n        open={showNotifications} \n        onOpenChange={setShowNotifications} \n      />\n    </header>\n  );\n}\n","size_bytes":2543},"client/src/components/quick-actions.tsx":{"content":"/**\n * ========================================================================\n * QUICK ACTIONS COMPONENT - COMPONENT QUICK ACTIONS\n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Quick Actions component cung cấp shortcuts cho các tasks phổ biến:\n * - Quick action buttons với role-based permissions\n * - Popular books display với ranking\n * - Modal management cho add book, borrow, add user\n * \n * Features:\n * - Admin actions: Add Book, Add User\n * - User actions: Process Borrowing\n * - Generate Report (placeholder)\n * - Popular books ranking với borrow count\n */\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport AddBookModal from \"@/components/modals/add-book-modal\";\nimport BorrowBookModal from \"@/components/modals/borrow-book-modal\";\nimport AddUserModal from \"@/components/modals/add-user-modal\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface QuickActionsProps {\n  popularBooks: Array<{\n    id: string;\n    title: string;\n    author: string;\n    borrowCount: number;\n  }>;\n  isLoading: boolean;\n}\n\n/**\n * Quick Actions component với shortcuts và popular books\n * \n * Responsibilities:\n * - Provide quick access buttons cho common tasks\n * - Display popular books với ranking system\n * - Manage modals cho các actions\n * - Role-based action filtering\n * \n * Permissions:\n * - Admin: Add Book, Process Borrowing, Add User, Generate Report\n * - Regular User: Process Borrowing, Generate Report\n */\nexport default function QuickActions({ popularBooks, isLoading }: QuickActionsProps) {\n  const { user } = useAuth();\n  \n  /**\n   * Modal states cho các quick actions\n   */\n  const [showAddBookModal, setShowAddBookModal] = useState(false);\n  const [showBorrowModal, setShowBorrowModal] = useState(false);\n  const [showUserModal, setShowUserModal] = useState(false);\n\n  const handleGenerateReport = () => {\n    // Placeholder for report generation\n    console.log(\"Generate report clicked\");\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Quick Actions */}\n      <Card data-testid=\"quick-actions\">\n        <CardHeader>\n          <CardTitle>Quick Actions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {user?.role === \"admin\" && (\n              <Button\n                className=\"w-full justify-start bg-primary text-primary-foreground hover:bg-primary/90\"\n                onClick={() => setShowAddBookModal(true)}\n                data-testid=\"button-quick-add-book\"\n              >\n                <i className=\"fas fa-plus mr-3\"></i>\n                Add New Book\n              </Button>\n            )}\n            \n            <Button\n              className=\"w-full justify-start bg-accent text-accent-foreground hover:bg-accent/90\"\n              onClick={() => setShowBorrowModal(true)}\n              data-testid=\"button-quick-process-borrowing\"\n            >\n              <i className=\"fas fa-handshake mr-3\"></i>\n              Process Borrowing\n            </Button>\n            \n            {user?.role === \"admin\" && (\n              <Button\n                className=\"w-full justify-start bg-secondary text-secondary-foreground hover:bg-secondary/90\"\n                onClick={() => setShowUserModal(true)}\n                data-testid=\"button-quick-add-user\"\n              >\n                <i className=\"fas fa-user-plus mr-3\"></i>\n                Add User\n              </Button>\n            )}\n            \n            <Button\n              className=\"w-full justify-start bg-muted text-muted-foreground hover:bg-muted/90\"\n              onClick={handleGenerateReport}\n              data-testid=\"button-quick-generate-report\"\n            >\n              <i className=\"fas fa-file-alt mr-3\"></i>\n              Generate Report\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Popular Books */}\n      <Card data-testid=\"popular-books\">\n        <CardHeader>\n          <CardTitle>Popular Books</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"space-y-3\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"flex items-center space-x-3\">\n                  <Skeleton className=\"w-8 h-8 rounded\" />\n                  <div className=\"flex-1 space-y-1\">\n                    <Skeleton className=\"h-4 w-3/4\" />\n                    <Skeleton className=\"h-3 w-1/2\" />\n                  </div>\n                  <Skeleton className=\"h-4 w-12\" />\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {popularBooks.map((book, index) => (\n                <div \n                  key={book.id} \n                  className=\"flex items-center space-x-3\"\n                  data-testid={`popular-book-${index}`}\n                >\n                  <div className={`w-8 h-8 rounded flex items-center justify-center ${\n                    index === 0 ? 'bg-primary' : index === 1 ? 'bg-secondary' : 'bg-muted'\n                  }`}>\n                    <span className={`text-xs font-bold ${\n                      index === 0 ? 'text-primary-foreground' : \n                      index === 1 ? 'text-secondary-foreground' : 'text-muted-foreground'\n                    }`}>\n                      {index + 1}\n                    </span>\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-foreground\">{book.title}</p>\n                    <p className=\"text-xs text-muted-foreground\">{book.author}</p>\n                  </div>\n                  <span className=\"text-xs text-accent\">\n                    {book.borrowCount} borrows\n                  </span>\n                </div>\n              ))}\n              \n              {popularBooks.length === 0 && (\n                <div className=\"text-center py-4\">\n                  <p className=\"text-sm text-muted-foreground\">No popular books yet</p>\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Modals */}\n      <AddBookModal open={showAddBookModal} onOpenChange={setShowAddBookModal} />\n      <BorrowBookModal open={showBorrowModal} onOpenChange={setShowBorrowModal} />\n      <AddUserModal open={showUserModal} onOpenChange={setShowUserModal} />\n    </div>\n  );\n}\n","size_bytes":6630},"client/src/components/recent-activity.tsx":{"content":"/**\n * ========================================================================\n * RECENT ACTIVITY COMPONENT - COMPONENT HOẠT ĐỘNG GẦN ĐÂY\n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Recent Activity component hiển thị feed hoạt động gần đây:\n * - Activity feed với icons và badges\n * - Time formatting với relative time\n * - Action categorization với color coding\n * - Loading state với skeletons\n * \n * Features:\n * - Activity types: borrow, return, add_book, overdue\n * - Icon và color mapping theo action type\n * - Relative time display (e.g., \"2 hours ago\")\n * - Empty state handling\n */\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface RecentActivityProps {\n  activities: Array<{\n    id: string;\n    action: string;\n    details: string;\n    timestamp: string;\n    user: {\n      firstName: string;\n      lastName: string;\n    };\n  }>;\n  isLoading: boolean;\n}\n\n/**\n * Recent Activity component cho activity feed\n * \n * Responsibilities:\n * - Display recent system activities với visual indicators\n * - Categorize actions với appropriate icons và colors\n * - Format timestamps cho user-friendly display\n * - Handle loading và empty states\n * \n * Activity Types:\n * - borrow: Arrow right, accent color\n * - return: Arrow left, primary color  \n * - add_book: Plus icon, secondary color\n * - overdue: Exclamation, destructive color\n */\nexport default function RecentActivity({ activities, isLoading }: RecentActivityProps) {\n  /**\n   * Map activity actions to appropriate icons và colors\n   */\n  const getActivityIcon = (action: string) => {\n    switch (action) {\n      case 'borrow':\n        return { icon: 'fas fa-arrow-right', color: 'bg-accent text-accent-foreground' };\n      case 'return':\n        return { icon: 'fas fa-arrow-left', color: 'bg-primary text-primary-foreground' };\n      case 'add_book':\n        return { icon: 'fas fa-plus', color: 'bg-secondary text-secondary-foreground' };\n      case 'overdue':\n        return { icon: 'fas fa-exclamation', color: 'bg-destructive text-destructive-foreground' };\n      default:\n        return { icon: 'fas fa-info', color: 'bg-muted text-muted-foreground' };\n    }\n  };\n\n  const getActivityBadge = (action: string) => {\n    switch (action) {\n      case 'borrow':\n        return { text: 'Borrowed', color: 'bg-accent text-accent-foreground' };\n      case 'return':\n        return { text: 'Returned', color: 'bg-primary text-primary-foreground' };\n      case 'add_book':\n        return { text: 'Added', color: 'bg-secondary text-secondary-foreground' };\n      case 'overdue':\n        return { text: 'Overdue', color: 'bg-destructive text-destructive-foreground' };\n      default:\n        return { text: action, color: 'bg-muted text-muted-foreground' };\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Activity</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"flex items-center space-x-4\">\n                <Skeleton className=\"w-10 h-10 rounded-full\" />\n                <div className=\"flex-1 space-y-2\">\n                  <Skeleton className=\"h-4 w-3/4\" />\n                  <Skeleton className=\"h-3 w-1/2\" />\n                </div>\n                <Skeleton className=\"h-6 w-16 rounded-full\" />\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card data-testid=\"recent-activity\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Recent Activity</CardTitle>\n          <Button variant=\"ghost\" size=\"sm\">\n            View All\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {activities.map((activity) => {\n            const iconConfig = getActivityIcon(activity.action);\n            const badgeConfig = getActivityBadge(activity.action);\n            \n            return (\n              <div \n                key={activity.id} \n                className=\"flex items-center space-x-4 p-4 hover:bg-muted rounded-lg transition-colors\"\n                data-testid={`activity-${activity.id}`}\n              >\n                <div className={`w-10 h-10 rounded-full flex items-center justify-center ${iconConfig.color}`}>\n                  <i className={`${iconConfig.icon} text-sm`}></i>\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-foreground\">\n                    {activity.details}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {formatDistanceToNow(new Date(activity.timestamp), { addSuffix: true })}\n                  </p>\n                </div>\n                <span className={`text-xs px-2 py-1 rounded-full ${badgeConfig.color}`}>\n                  {badgeConfig.text}\n                </span>\n              </div>\n            );\n          })}\n          \n          {activities.length === 0 && (\n            <div className=\"text-center py-8\">\n              <div className=\"w-12 h-12 bg-muted rounded-full flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-history text-muted-foreground\"></i>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">No recent activity</p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5822},"client/src/components/sidebar.tsx":{"content":"/**\n * ========================================================================\n * SIDEBAR COMPONENT - COMPONENT THANH BÊN\n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Sidebar navigation component với các tính năng:\n * - Navigation menu với role-based access control\n * - User info display với profile image support\n * - Mobile responsive với backdrop và toggle\n * - Logout functionality\n * \n * Features:\n * - Role-based menu items (Users menu chỉ cho admin)\n * - Current page highlighting\n * - Mobile menu với smooth animations\n * - User profile info với role badge\n */\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { BookOpen, BarChart3, Users, HandHeart, History, LogOut, Menu, X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useState } from \"react\";\n\ninterface SidebarProps {\n  className?: string;\n}\n\n/**\n * Sidebar navigation component\n * \n * Responsibilities:\n * - Provide main navigation với role-based items\n * - Display user info và current role\n * - Handle mobile responsive behavior\n * - Manage authentication state với logout\n * \n * Permissions:\n * - Tất cả users: Dashboard, Books, Borrowings, Activity Log\n * - Admin only: Users menu item\n */\nexport function Sidebar({ className }: SidebarProps) {\n  const [location, setLocation] = useLocation();\n  const { user } = useAuth();\n  const [isMobileOpen, setIsMobileOpen] = useState(false);\n\n  /**\n   * Navigation items configuration với role-based filtering\n   * Admin có thêm Users menu item\n   */\n  const navigation = [\n    {\n      name: \"Dashboard\",\n      href: \"/\",\n      icon: BarChart3,\n      current: location === \"/\",\n    },\n    {\n      name: \"Books\",\n      href: \"/books\",\n      icon: BookOpen,\n      current: location === \"/books\",\n    },\n    {\n      name: \"Borrowings\",\n      href: \"/borrowings\",\n      icon: HandHeart,\n      current: location === \"/borrowings\",\n    },\n    // Conditional Users menu cho admin\n    ...(user?.role === 'admin' ? [{\n      name: \"Users\",\n      href: \"/users\",\n      icon: Users,\n      current: location === \"/users\",\n    }] : []),\n    {\n      name: \"Activity Log\",\n      href: \"/activity\",\n      icon: History,\n      current: location === \"/activity\",\n    },\n  ];\n\n  const handleLogout = () => {\n    window.location.href = '/api/logout';\n  };\n\n  const toggleMobile = () => {\n    setIsMobileOpen(!isMobileOpen);\n  };\n\n  return (\n    <>\n      {/* Mobile menu button */}\n      <div className=\"md:hidden fixed top-4 left-4 z-50\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={toggleMobile}\n          data-testid=\"button-mobile-menu\"\n        >\n          {isMobileOpen ? <X className=\"h-6 w-6\" /> : <Menu className=\"h-6 w-6\" />}\n        </Button>\n      </div>\n\n      {/* Backdrop */}\n      {isMobileOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden\"\n          onClick={() => setIsMobileOpen(false)}\n          data-testid=\"sidebar-backdrop\"\n        />\n      )}\n\n      {/* Sidebar */}\n      <div className={cn(\n        \"fixed md:relative w-64 bg-card shadow-lg border-r border-border z-50 h-full transition-transform duration-300\",\n        isMobileOpen ? \"translate-x-0\" : \"-translate-x-full md:translate-x-0\",\n        className\n      )} data-testid=\"sidebar\">\n        {/* Header */}\n        <div className=\"p-6 border-b border-border\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <BookOpen className=\"w-5 h-5 text-primary-foreground\" />\n            </div>\n            <div>\n              <h1 className=\"text-lg font-semibold text-foreground\" data-testid=\"text-app-title\">\n                LibraryMS\n              </h1>\n              <p className=\"text-sm text-muted-foreground\">v1.0</p>\n            </div>\n          </div>\n        </div>\n\n        {/* User Info */}\n        <div className=\"p-4 border-b border-border\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-accent rounded-full flex items-center justify-center overflow-hidden\">\n              {user?.profileImageUrl ? (\n                <img \n                  src={user.profileImageUrl} \n                  alt=\"Profile\" \n                  className=\"w-8 h-8 object-cover\"\n                />\n              ) : (\n                <BookOpen className=\"w-4 h-4 text-accent-foreground\" />\n              )}\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium text-foreground truncate\" data-testid=\"text-user-name\">\n                {user?.firstName || user?.lastName ? \n                  `${user.firstName || ''} ${user.lastName || ''}`.trim() : \n                  user?.email || 'User'\n                }\n              </p>\n              <Badge \n                variant={user?.role === 'admin' ? \"default\" : \"secondary\"}\n                className=\"text-xs\"\n                data-testid=\"badge-user-role\"\n              >\n                {user?.role === 'admin' ? 'Admin' : 'User'}\n              </Badge>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"p-4 space-y-2 flex-1\">\n          {navigation.map((item) => (\n            <Button\n              key={item.name}\n              variant={item.current ? \"default\" : \"ghost\"}\n              className={cn(\n                \"w-full justify-start\",\n                item.current && \"bg-primary text-primary-foreground hover:bg-primary/90\"\n              )}\n              onClick={() => {\n                setLocation(item.href);\n                setIsMobileOpen(false);\n              }}\n              data-testid={`nav-${item.name.toLowerCase().replace(' ', '-')}`}\n            >\n              <item.icon className=\"w-4 h-4 mr-3\" />\n              {item.name}\n            </Button>\n          ))}\n        </nav>\n\n        {/* Logout */}\n        <div className=\"p-4 border-t border-border\">\n          <Button\n            variant=\"ghost\"\n            className=\"w-full justify-start text-destructive hover:text-destructive hover:bg-destructive/10\"\n            onClick={handleLogout}\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"w-4 h-4 mr-3\" />\n            Logout\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":6597},"client/src/components/stats-cards.tsx":{"content":"/**\n * ========================================================================\n * STATS CARDS COMPONENT - COMPONENT THẺ THỐNG KÊ\n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Stats Cards component hiển thị các metrics chính của hệ thống:\n * - Key metrics: Total Books, Borrowed, Overdue, Users\n * - Visual indicators với icons và colors\n * - Change indicators với trend information\n * - Loading state với skeleton cards\n * \n * Features:\n * - Grid layout responsive (1 col mobile, 4 cols desktop)\n * - Color-coded cards theo metric type\n * - Trend indicators (placeholder data)\n * - Number formatting với locale support\n */\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ninterface StatsCardsProps {\n  stats?: {\n    totalBooks: number;\n    totalBorrowed: number;\n    totalOverdue: number;\n    totalUsers: number;\n  };\n}\n\n/**\n * Stats Cards component cho dashboard metrics\n * \n * Responsibilities:\n * - Display key system statistics trong card format\n * - Provide visual indicators cho different metric types\n * - Show loading state khi data chưa available\n * - Format numbers cho readable display\n * \n * Metrics:\n * - Total Books: Primary color, book icon\n * - Currently Borrowed: Accent color, handshake icon\n * - Overdue: Destructive color, warning icon\n * - Active Users: Secondary color, users icon\n */\nexport default function StatsCards({ stats }: StatsCardsProps) {\n  // Loading state với skeleton cards\n  if (!stats) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i}>\n            <CardContent className=\"p-6\">\n              <Skeleton className=\"h-16\" />\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const cards = [\n    {\n      title: \"Total Books\",\n      value: stats.totalBooks,\n      icon: \"fas fa-book\",\n      color: \"bg-primary\",\n      textColor: \"text-primary-foreground\",\n      change: \"+12 added this month\",\n      changeColor: \"text-accent\"\n    },\n    {\n      title: \"Currently Borrowed\",\n      value: stats.totalBorrowed,\n      icon: \"fas fa-handshake\",\n      color: \"bg-accent\",\n      textColor: \"text-accent-foreground\",\n      change: \"87% availability rate\",\n      changeColor: \"text-accent\"\n    },\n    {\n      title: \"Overdue\",\n      value: stats.totalOverdue,\n      icon: \"fas fa-exclamation-triangle\",\n      color: \"bg-destructive\",\n      textColor: \"text-destructive-foreground\",\n      change: \"-5 from last week\",\n      changeColor: \"text-destructive\"\n    },\n    {\n      title: \"Active Users\",\n      value: stats.totalUsers,\n      icon: \"fas fa-users\",\n      color: \"bg-secondary\",\n      textColor: \"text-secondary-foreground\",\n      change: \"+47 new this month\",\n      changeColor: \"text-accent\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\" data-testid=\"stats-cards\">\n      {cards.map((card, index) => (\n        <Card key={index} data-testid={`card-stat-${index}`}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">{card.title}</p>\n                <p className={`text-2xl font-bold ${index === 2 ? 'text-destructive' : 'text-foreground'}`}>\n                  {card.value.toLocaleString()}\n                </p>\n              </div>\n              <div className={`w-12 h-12 ${card.color} rounded-lg flex items-center justify-center`}>\n                <i className={`${card.icon} ${card.textColor}`}></i>\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <span className={card.changeColor}>{card.change.split(' ')[0]}</span>\n              <span className=\"text-muted-foreground ml-1\">{card.change.split(' ').slice(1).join(' ')}</span>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":4139},"client/src/hooks/use-mobile.tsx":{"content":"/**\n * ========================================================================\n * MOBILE DETECTION HOOK - HOOK DETECT MOBILE DEVICE\n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Hook để detect screen size và xác định xem đang ở mobile device hay không.\n * Sử dụng window.matchMedia API để responsive design.\n */\nimport * as React from \"react\"\n\n// Breakpoint cho mobile screens (< 768px theo Tailwind md breakpoint)\nconst MOBILE_BREAKPOINT = 768\n\n/**\n * Hook detect mobile screen size\n * \n * Features:\n * - Sử dụng matchMedia API cho performance tốt\n * - Listen resize events để update real-time\n * - Return boolean để dễ sử dụng trong components\n * \n * Initial state: undefined → prevent hydration mismatch\n * Subsequently: true/false based on screen width\n * \n * @returns boolean - true nếu screen width < 768px (mobile)\n */\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    // Create media query để track screen size changes\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    \n    // Event handler cho window resize\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    \n    // Listen cho media query changes\n    mql.addEventListener(\"change\", onChange)\n    \n    // Set initial value\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    \n    // Cleanup listener on unmount\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  // Convert undefined → false để đảm bảo boolean return type\n  return !!isMobile\n}\n","size_bytes":1761},"client/src/hooks/use-toast.ts":{"content":"/**\n * ========================================================================\n * TOAST NOTIFICATION SYSTEM - HỆ THỐNG THÔNG BÁO TOAST\n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Hook quản lý toast notifications với reducer pattern.\n * Sử dụng global state và timeout management cho auto-dismiss.\n * Based on shadcn/ui toast component.\n */\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\n/**\n * ========================================================================\n * CONFIGURATION - CẤU HÌNH\n * ========================================================================\n */\n\nconst TOAST_LIMIT = 1                     // Chỉ hiển thị 1 toast tại một thời điểm\nconst TOAST_REMOVE_DELAY = 1000000       // Delay rất lớn → manual dismiss only\n\n/**\n * ========================================================================\n * TYPES - ĐỊNH NGHĨA TYPES\n * ========================================================================\n */\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\n// Action types cho reducer pattern\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\n/**\n * ========================================================================\n * ID GENERATION - TẠO ID\n * ========================================================================\n */\n\nlet count = 0\n\n/**\n * Generate unique ID cho mỗi toast\n * Sử dụng counter với safe integer limit để tránh overflow\n */\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\n/**\n * Reducer actions cho toast state management\n */\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\n/**\n * Global state structure cho toast system\n */\ninterface State {\n  toasts: ToasterToast[]\n}\n\n/**\n * ========================================================================\n * TIMEOUT MANAGEMENT - QUẢN LÝ TIMEOUT\n * ========================================================================\n */\n\n// Map để track timeouts cho auto-dismiss của từng toast\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\n/**\n * Thêm toast vào queue để auto-remove sau delay\n * Sử dụng setTimeout để schedule removal\n * \n * @param toastId - ID của toast cần remove\n */\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return                                // Đã có timeout cho toast này\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\n/**\n * ========================================================================\n * REDUCER FUNCTION - HÀM REDUCER\n * ========================================================================\n */\n\n/**\n * Reducer function quản lý toast state với 4 action types\n * \n * Actions:\n * - ADD_TOAST: Thêm toast mới, giới hạn theo TOAST_LIMIT\n * - UPDATE_TOAST: Update properties của toast đã tồn tại\n * - DISMISS_TOAST: Bắt đầu dismiss process (set open=false, schedule remove)\n * - REMOVE_TOAST: Remove toast khỏi state hoàn toàn\n */\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        // Thêm toast mới vào đầu array, slice để tuân thủ TOAST_LIMIT\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        // Update toast với matching ID, merge properties\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // Side effect: Schedule removal sau delay\n      // TODO: Có thể extract thành separate action để pure function\n      if (toastId) {\n        addToRemoveQueue(toastId)         // Dismiss specific toast\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)      // Dismiss tất cả toasts\n        })\n      }\n\n      return {\n        ...state,\n        // Set open=false để trigger close animation\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],                     // Clear tất cả toasts\n        }\n      }\n      return {\n        ...state,\n        // Remove specific toast khỏi array\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\n/**\n * ========================================================================\n * GLOBAL STATE MANAGEMENT - QUẢN LÝ STATE GLOBAL\n * ========================================================================\n */\n\n// Array của callback functions để notify components khi state thay đổi\nconst listeners: Array<(state: State) => void> = []\n\n// Global state outside của React component tree\nlet memoryState: State = { toasts: [] }\n\n/**\n * Dispatch action và notify tất cả listeners\n * \n * @param action - Action object để update state\n */\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)                 // Notify các components subscribing\n  })\n}\n\n/**\n * ========================================================================\n * TOAST CREATION FUNCTION - HÀM TẠO TOAST\n * ========================================================================\n */\n\ntype Toast = Omit<ToasterToast, \"id\">\n\n/**\n * Main function để tạo và hiển thị toast notification\n * \n * @param props - Toast properties (title, description, variant, etc.)\n * @returns Object với id, dismiss, và update functions\n */\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  // Helper function để update toast đã tồn tại\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  \n  // Helper function để dismiss toast này\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  // Dispatch ADD_TOAST để hiển thị toast\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()              // Auto-dismiss khi user close\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\n/**\n * ========================================================================\n * REACT HOOK - HOOK REACT\n * ========================================================================\n */\n\n/**\n * React hook để access toast state và functions\n * \n * Features:\n * - Subscribe/unsubscribe tự động với global state\n * - Return current toasts array\n * - Provide toast function để tạo toasts mới\n * - Provide dismiss function để dismiss toasts\n * \n * @returns Object chứa toasts array và utility functions\n */\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    // Subscribe component này với global state changes\n    listeners.push(setState)\n    \n    // Cleanup subscription on unmount\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,                             // toasts array từ state\n    toast,                                // Function để tạo toast mới\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":8606},"client/src/hooks/useAuth.ts":{"content":"/**\n * ========================================================================\n * AUTHENTICATION HOOK - HOOK XÁC THỰC\n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Hook chính để quản lý authentication state trong toàn bộ ứng dụng.\n * Sử dụng TanStack Query để fetch và cache user data.\n */\nimport { useQuery } from \"@tanstack/react-query\";\nimport { User } from \"@shared/schema\";\n\n/**\n * Hook quản lý authentication state\n * \n * Features:\n * - Fetch current user từ /api/auth/user endpoint\n * - Cache user data với TanStack Query\n * - Tự động refetch khi cần thiết\n * - No retry cho authentication để tránh spam API calls\n * \n * State flow:\n * 1. isLoading: true khi đang fetch user data\n * 2. user: User object nếu authenticated, null nếu không\n * 3. isAuthenticated: boolean derived từ user data\n * \n * @returns Object chứa user data, loading state, và authentication status\n */\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User | null>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,                         // Không retry cho auth calls\n  });\n\n  return {\n    user,                                 // User object hoặc null\n    isLoading,                           // Loading state từ query\n    isAuthenticated: !!user && user !== null,  // Derived authentication status\n  };\n}\n","size_bytes":1479},"client/src/lib/authUtils.ts":{"content":"/**\n * ========================================================================\n * AUTHENTICATION UTILITIES - TIỆN ÍCH XÁC THỰC\n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Module chứa các utility functions để xử lý authentication errors.\n */\n\n/**\n * Kiểm tra xem error có phải là lỗi 401 Unauthorized không\n * \n * Sử dụng để detect khi user session hết hạn hoặc không có quyền truy cập.\n * Error message format: \"401: Unauthorized\" hoặc \"401: <custom message>\"\n * \n * @param error - Error object từ fetch hoặc API calls\n * @returns true nếu error là 401 Unauthorized\n */\nexport function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":844},"client/src/lib/queryClient.ts":{"content":"/**\n * ========================================================================\n * TANSTACK QUERY CLIENT CONFIGURATION - CẤU HÌNH QUERY CLIENT\n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Module thiết lập TanStack Query client cho server state management.\n * Bao gồm custom fetch functions, error handling, và caching configuration.\n */\nimport { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\n/**\n * ========================================================================\n * ERROR HANDLING - XỬ LÝ ERRORS\n * ========================================================================\n */\n\n/**\n * Utility function để throw error nếu HTTP response không thành công\n * \n * @param res - Fetch Response object\n * @throws Error với format \"{status}: {errorMessage}\"\n */\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\n/**\n * ========================================================================\n * API REQUEST FUNCTIONS - HÀM GỌI API\n * ========================================================================\n */\n\n/**\n * Generic API request function cho mutations (POST, PUT, DELETE)\n * \n * Features:\n * - Tự động set Content-Type header khi có data\n * - Include cookies cho authentication\n * - Throw error nếu response không thành công\n * - Return raw Response object để caller xử lý JSON/text\n * \n * @param method - HTTP method (POST, PUT, DELETE, etc.)\n * @param url - API endpoint URL\n * @param data - Request body data (optional)\n * @returns Promise<Response> - Raw fetch Response object\n */\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",               // Include cookies cho authentication\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\n/**\n * ========================================================================\n * QUERY FUNCTION FACTORY - FACTORY HÀM QUERY\n * ========================================================================\n */\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\n\n/**\n * Tạo custom QueryFunction cho TanStack Query với error handling\n * \n * Features:\n * - Smart URL building từ queryKey array\n * - Object params → query string conversion\n * - Configurable 401 handling (return null hoặc throw)\n * - Automatic JSON parsing\n * - Include cookies cho authentication\n * \n * QueryKey format examples:\n * - [\"/api/books\"] → GET /api/books\n * - [\"/api/books\", \"123\"] → GET /api/books/123\n * - [\"/api/books\", { page: 1, limit: 10 }] → GET /api/books?page=1&limit=10\n * \n * @param options - Configuration object\n * @returns TanStack Query function\n */\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    // Extract base URL và params từ queryKey array\n    const [baseUrl, ...params] = queryKey;\n    let url = baseUrl as string;\n    \n    // Xử lý params để build URL\n    if (params.length > 0) {\n      const lastParam = params[params.length - 1];\n      \n      // Nếu param cuối là object → convert thành query string\n      if (typeof lastParam === 'object' && lastParam !== null) {\n        const searchParams = new URLSearchParams();\n        Object.entries(lastParam).forEach(([key, value]) => {\n          if (value !== undefined && value !== null && value !== '') {\n            searchParams.append(key, String(value));\n          }\n        });\n        if (searchParams.toString()) {\n          url += `?${searchParams.toString()}`;\n        }\n      } else {\n        // Cho non-object params, join với \"/\"\n        url = queryKey.join(\"/\") as string;\n      }\n    }\n    \n    // Gọi API với credentials để include authentication cookies\n    const res = await fetch(url, {\n      credentials: \"include\",\n    });\n\n    // Xử lý 401 Unauthorized theo config\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;                        // Return null thay vì throw (cho auth queries)\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\n/**\n * ========================================================================\n * QUERY CLIENT INSTANCE - INSTANCE QUERY CLIENT\n * ========================================================================\n */\n\n/**\n * TanStack Query client instance với custom configuration\n * \n * Query Configuration:\n * - Custom queryFn với smart URL building và 401 handling\n * - Disable auto refetch để tránh unnecessary API calls\n * - 5 minutes stale time cho reasonable caching\n * - Smart retry logic: no retry cho 401, max 3 retries cho other errors\n * \n * Mutation Configuration:\n * - No retry cho mutations để tránh duplicate API calls\n * \n * Used globally trong App component qua QueryClientProvider\n */\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"returnNull\" }), // Return null thay vì throw cho 401\n      refetchInterval: false,                       // Disable auto polling\n      refetchOnWindowFocus: false,                  // Disable refetch on focus\n      staleTime: 5 * 60 * 1000,                    // 5 phút cache time\n      retry: (failureCount, error: any) => {\n        // Không retry cho 401 unauthorized errors\n        if (error?.message?.includes('401')) {\n          return false;\n        }\n        return failureCount < 3;                    // Max 3 retries cho errors khác\n      },\n    },\n    mutations: {\n      retry: false,                                 // Không retry mutations\n    },\n  },\n});\n","size_bytes":6023},"client/src/lib/utils.ts":{"content":"/**\n * ========================================================================\n * UTILITY FUNCTIONS - HÀM TIỆN ÍCH\n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Module chứa các utility functions tái sử dụng trong toàn bộ ứng dụng.\n */\nimport { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\n/**\n * Combine và merge CSS class names một cách thông minh\n * \n * Sử dụng:\n * - clsx: Conditional class names với object/array syntax\n * - tailwind-merge: Merge conflicting Tailwind classes (overrides)\n * \n * VD: cn(\"p-4\", \"p-2\") → \"p-2\" (p-2 overrides p-4)\n *     cn(\"bg-red-500\", isActive && \"bg-blue-500\") → conditional styling\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":876},"client/src/pages/activity.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { History, Plus, HandHeart, RotateCcw, UserPlus, Edit, Trash2, User } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function Activity() {\n  const { user } = useAuth();\n  const [page, setPage] = useState(1);\n\n  const { data: activityData, isLoading } = useQuery({\n    queryKey: [\"/api/activity-logs\", { page }],\n  });\n\n  const getActionIcon = (action: string) => {\n    if (action.includes('borrowed')) return <HandHeart className=\"w-4 h-4\" />;\n    if (action.includes('returned')) return <RotateCcw className=\"w-4 h-4\" />;\n    if (action.includes('added')) return <Plus className=\"w-4 h-4\" />;\n    if (action.includes('updated')) return <Edit className=\"w-4 h-4\" />;\n    if (action.includes('deleted')) return <Trash2 className=\"w-4 h-4\" />;\n    if (action.includes('user')) return <UserPlus className=\"w-4 h-4\" />;\n    return <History className=\"w-4 h-4\" />;\n  };\n\n  const getActionColor = (action: string) => {\n    if (action.includes('borrowed')) return 'default';\n    if (action.includes('returned')) return 'secondary';\n    if (action.includes('added')) return 'outline';\n    if (action.includes('updated')) return 'secondary';\n    if (action.includes('deleted')) return 'destructive';\n    if (action.includes('user')) return 'outline';\n    return 'default';\n  };\n\n  const formatTimestamp = (timestamp: string) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diff = now.getTime() - date.getTime();\n    \n    const minutes = Math.floor(diff / (1000 * 60));\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n    \n    if (minutes < 1) return 'Just now';\n    if (minutes < 60) return `${minutes} minutes ago`;\n    if (hours < 24) return `${hours} hours ago`;\n    if (days < 7) return `${days} days ago`;\n    \n    return date.toLocaleDateString();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"animate-pulse space-y-4\">\n              <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n              <div className=\"h-64 bg-muted rounded\"></div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"border-border\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <History className=\"w-5 h-5\" />\n            Activity Log\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            {user?.role === 'admin' \n              ? 'View all system activities and user actions'\n              : 'View your library activities and transactions'\n            }\n          </p>\n        </CardHeader>\n        \n        <CardContent>\n          <div className=\"space-y-4\">\n            {(activityData as any)?.logs?.map((log: any) => (\n              <div \n                key={log.id} \n                className=\"flex items-start space-x-4 p-4 hover:bg-muted rounded-lg transition-colors border border-border\"\n                data-testid={`activity-${log.id}`}\n              >\n                <div className=\"w-10 h-10 bg-accent rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                  {getActionIcon(log.action)}\n                </div>\n                \n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium text-foreground mb-1\" data-testid={`text-activity-details-${log.id}`}>\n                        {log.details}\n                      </p>\n                      \n                      {user?.role === 'admin' && log.user && (\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <div className=\"w-5 h-5 bg-muted rounded-full flex items-center justify-center\">\n                            <User className=\"w-3 h-3 text-muted-foreground\" />\n                          </div>\n                          <span className=\"text-xs text-muted-foreground\" data-testid={`text-activity-user-${log.id}`}>\n                            {log.user.firstName} {log.user.lastName} ({log.user.email})\n                          </span>\n                        </div>\n                      )}\n                      \n                      <div className=\"flex items-center space-x-3\">\n                        <Badge \n                          variant={getActionColor(log.action) as any}\n                          className=\"text-xs\"\n                          data-testid={`badge-activity-action-${log.id}`}\n                        >\n                          <div className=\"flex items-center gap-1\">\n                            {getActionIcon(log.action)}\n                            {log.action.replace('_', ' ').toUpperCase()}\n                          </div>\n                        </Badge>\n                        \n                        {log.entityType && (\n                          <Badge variant=\"outline\" className=\"text-xs\" data-testid={`badge-activity-entity-${log.id}`}>\n                            {log.entityType}\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-right flex-shrink-0 ml-4\">\n                      <p className=\"text-xs text-muted-foreground\" data-testid={`text-activity-time-${log.id}`}>\n                        {formatTimestamp(log.timestamp)}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\" data-testid={`text-activity-date-${log.id}`}>\n                        {new Date(log.timestamp).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )) || []}\n            \n            {(!(activityData as any)?.logs || (activityData as any).logs.length === 0) && (\n              <div className=\"text-center py-12\" data-testid=\"text-no-activity\">\n                <History className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-foreground mb-2\">No Activity Yet</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {user?.role === 'admin' \n                    ? 'System activities will appear here as users interact with the library'\n                    : 'Your library activities will appear here as you borrow and return books'\n                  }\n                </p>\n              </div>\n            )}\n          </div>\n\n          {/* Pagination */}\n          {(activityData as any)?.logs && (activityData as any).logs.length > 0 && (\n            <div className=\"flex items-center justify-between mt-6 pt-6 border-t border-border\">\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"text-pagination-info\">\n                Showing page {page} - {(activityData as any).logs?.length || 0} activities\n                {(activityData as any).total && ` of ${(activityData as any).total} total`}\n              </p>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm text-muted-foreground\">Page {page}</span>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  disabled={page === 1}\n                  onClick={() => setPage(p => Math.max(1, p - 1))}\n                  data-testid=\"button-prev-page\"\n                >\n                  Previous\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  disabled={\n                    (activityData as any).total \n                      ? page * 20 >= (activityData as any).total \n                      : (activityData as any).logs?.length < 20\n                  }\n                  onClick={() => setPage(p => p + 1)}\n                  data-testid=\"button-next-page\"\n                >\n                  Next\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8558},"client/src/pages/books.tsx":{"content":"/**\n * ========================================================================\n * BOOKS MANAGEMENT PAGE - TRANG QUẢN LÝ SÁCH\n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Trang quản lý sách với các tính năng:\n * - Tìm kiếm và lọc sách theo nhiều tiêu chí\n * - Hiển thị danh sách sách với pagination\n * - CRUD operations cho admin (thêm, sửa, xóa sách)\n * - Table view với thông tin chi tiết và stock\n */\nimport { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { BookOpen, Plus, Search, Edit, Trash2 } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AddBookModal } from \"@/components/modals/add-book-modal\";\nimport { EditBookModal } from \"@/components/modals/edit-book-modal\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { BookWithAvailability } from \"@shared/schema\";\n\n/**\n * Response interface cho books API endpoint\n */\ninterface BooksResponse {\n  books: BookWithAvailability[];\n  total: number;\n}\n\n/**\n * Books management component\n * \n * Features:\n * - Multi-field search (title, author, genre, ISBN)\n * - Filtering by genre và status (available/borrowed)\n * - Pagination support cho large datasets\n * - Admin-only actions: add, edit, delete books\n * - Real-time stock tracking (available/total quantity)\n * \n * Permissions:\n * - Tất cả users có thể view và search books\n * - Chỉ admin có thể add/edit/delete books\n */\nexport default function Books() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  /**\n   * ========================================================================\n   * STATE MANAGEMENT - QUẢN LÝ STATE\n   * ========================================================================\n   */\n  \n  // Search state (phân biệt search input và actual search để optimize API calls)\n  const [search, setSearch] = useState(\"\");               // Actual search term gửi lên API\n  const [searchInput, setSearchInput] = useState(\"\");     // Input value (real-time typing)\n  const [searchField, setSearchField] = useState(\"all\");  // Field để search (all, title, author, etc.)\n  \n  // Filter states\n  const [genre, setGenre] = useState(\"all\");\n  const [status, setStatus] = useState(\"all\");\n  const [page, setPage] = useState(1);\n  \n  // Modal states\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [editingBook, setEditingBook] = useState<BookWithAvailability | null>(null);\n\n  const handleSearch = () => {\n    setSearch(searchInput);\n    setPage(1); // Reset to first page when searching\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  const { data: booksData, isLoading } = useQuery<BooksResponse>({\n    queryKey: [\"/api/books\", search, searchField, genre, status, page],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (search) {\n        params.append('search', search);\n        if (searchField && searchField !== 'all') params.append('searchField', searchField);\n      }\n      if (genre && genre !== 'all') params.append('genre', genre);\n      if (status && status !== 'all') params.append('status', status);\n      params.append('page', page.toString());\n      params.append('limit', '10');\n      \n      const response = await fetch(`/api/books?${params.toString()}`, {\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        throw new Error(`${response.status}: ${response.statusText}`);\n      }\n      \n      return response.json();\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (bookId: number) => {\n      await apiRequest(\"DELETE\", `/api/books/${bookId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/books\"] });\n      toast({\n        title: \"Success\",\n        description: \"Book deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete book\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDelete = (bookId: number, title: string) => {\n    if (confirm(`Are you sure you want to delete \"${title}\"?`)) {\n      deleteMutation.mutate(bookId);\n    }\n  };\n\n  const handleEdit = (book: BookWithAvailability) => {\n    setEditingBook(book);\n    setShowEditModal(true);\n  };\n\n  const searchFields = [\n    { value: \"all\", label: \"All Fields\" },\n    { value: \"id\", label: \"Book ID\" },\n    { value: \"title\", label: \"Title\" },\n    { value: \"author\", label: \"Author\" },\n    { value: \"genre\", label: \"Genre\" },\n  ];\n  \n  const genres = [\"all\", \"fiction\", \"non-fiction\", \"science\", \"history\", \"biography\", \"mystery\", \"romance\", \"fantasy\", \"thriller\", \"self-help\", \"technology\", \"art\", \"business\", \"health\", \"travel\", \"cooking\", \"other\"];\n  const statuses = [\"all\", \"available\", \"borrowed\"];\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"animate-pulse space-y-4\">\n              <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n              <div className=\"h-64 bg-muted rounded\"></div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"border-border\">\n        <CardHeader>\n          <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center space-y-4 sm:space-y-0\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <BookOpen className=\"w-5 h-5\" />\n              Books Management\n            </CardTitle>\n            {user?.role === 'admin' && (\n              <Button \n                onClick={() => setShowAddModal(true)}\n                data-testid=\"button-add-new-book\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add New Book\n              </Button>\n            )}\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          {/* Search and Filters */}\n          <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n            <div className=\"flex gap-2 flex-1\">\n              <Select value={searchField} onValueChange={setSearchField}>\n                <SelectTrigger className=\"w-40\" data-testid=\"select-search-field\">\n                  <SelectValue placeholder=\"Search by\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {searchFields.map((field) => (\n                    <SelectItem key={field.value} value={field.value}>\n                      {field.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              \n              <div className=\"flex-1 relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  placeholder={`Search by ${searchFields.find(f => f.value === searchField)?.label.toLowerCase() || 'all fields'}...`}\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-books\"\n                />\n              </div>\n              \n              <Button onClick={handleSearch} data-testid=\"button-search-books\">\n                <Search className=\"w-4 h-4 mr-2\" />\n                Search\n              </Button>\n            </div>\n            \n            <Select value={genre} onValueChange={setGenre}>\n              <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"select-genre-filter\">\n                <SelectValue placeholder=\"All Genres\" />\n              </SelectTrigger>\n              <SelectContent>\n                {genres.map((g) => (\n                  <SelectItem key={g} value={g}>\n                    {g === 'all' ? 'All Genres' : g.charAt(0).toUpperCase() + g.slice(1)}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            \n            <Select value={status} onValueChange={setStatus}>\n              <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                {statuses.map((s) => (\n                  <SelectItem key={s} value={s}>\n                    {s === 'all' ? 'All Status' : s.charAt(0).toUpperCase() + s.slice(1)}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Books Table */}\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Book ID</TableHead>\n                  <TableHead>Book</TableHead>\n                  <TableHead>Author</TableHead>\n                  <TableHead>Genre</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Stock</TableHead>\n                  {user?.role === 'admin' && <TableHead>Actions</TableHead>}\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {booksData?.books?.map((book: BookWithAvailability) => (\n                  <TableRow key={book.id} data-testid={`row-book-${book.id}`}>\n                    <TableCell>\n                      <p className=\"font-mono text-sm\" data-testid={`text-book-id-${book.id}`}>\n                        {book.isbn}\n                      </p>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-12 bg-primary rounded flex items-center justify-center\">\n                          <BookOpen className=\"w-4 h-4 text-primary-foreground\" />\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-foreground\" data-testid={`text-book-title-${book.id}`}>\n                            {book.title}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\" data-testid={`text-book-description-${book.id}`}>\n                            {book.description || 'No description'}\n                          </p>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"text-foreground\" data-testid={`text-book-author-${book.id}`}>\n                      {book.author}\n                    </TableCell>\n                    <TableCell className=\"text-foreground\" data-testid={`text-book-genre-${book.id}`}>\n                      {book.genre}\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        variant={book.isAvailable ? \"default\" : \"destructive\"}\n                        data-testid={`badge-book-status-${book.id}`}\n                      >\n                        {book.isAvailable ? \"Available\" : \"Borrowed\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-foreground\" data-testid={`text-book-stock-${book.id}`}>\n                      {book.availableQuantity}/{book.quantity}\n                    </TableCell>\n                    {user?.role === 'admin' && (\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => handleEdit(book)}\n                            data-testid={`button-edit-book-${book.id}`}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => handleDelete(book.id, book.title)}\n                            disabled={deleteMutation.isPending}\n                            data-testid={`button-delete-book-${book.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    )}\n                  </TableRow>\n                )) || []}\n              </TableBody>\n            </Table>\n            \n            {(!booksData?.books || booksData.books.length === 0) && (\n              <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"text-no-books\">\n                No books found\n              </div>\n            )}\n          </div>\n\n          {/* Pagination */}\n          {booksData?.total && booksData.total > 10 && (\n            <div className=\"flex items-center justify-between mt-6\">\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"text-pagination-info\">\n                Showing {Math.min(10, booksData.books?.length || 0)} of {booksData.total} books\n              </p>\n              <div className=\"flex space-x-2\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  disabled={page === 1}\n                  onClick={() => setPage(p => Math.max(1, p - 1))}\n                  data-testid=\"button-prev-page\"\n                >\n                  Previous\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  disabled={page * 10 >= booksData.total}\n                  onClick={() => setPage(p => p + 1)}\n                  data-testid=\"button-next-page\"\n                >\n                  Next\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <AddBookModal \n        open={showAddModal} \n        onOpenChange={setShowAddModal} \n      />\n      \n      <EditBookModal \n        open={showEditModal} \n        onOpenChange={(open) => {\n          setShowEditModal(open);\n          if (!open) setEditingBook(null);\n        }}\n        book={editingBook}\n      />\n    </div>\n  );\n}\n","size_bytes":15421},"client/src/pages/borrowing.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { HandHeart, Plus, RotateCcw, Clock, CheckCircle } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport BorrowBookModal from \"@/components/modals/borrow-book-modal\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function Borrowing() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [status, setStatus] = useState(\"all\");\n  const [page, setPage] = useState(1);\n  const [showBorrowModal, setShowBorrowModal] = useState(false);\n\n  const { data: borrowingsData, isLoading } = useQuery({\n    queryKey: [\"/api/borrowings\", { status, page }],\n  });\n\n  const returnMutation = useMutation({\n    mutationFn: async (borrowingId: number) => {\n      await apiRequest(\"PUT\", `/api/borrowings/${borrowingId}/return`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/borrowings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Book returned successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to return book\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleReturn = (borrowingId: number, bookTitle: string) => {\n    if (confirm(`Are you sure you want to return \"${bookTitle}\"?`)) {\n      returnMutation.mutate(borrowingId);\n    }\n  };\n\n  const isOverdue = (dueDate: string) => {\n    return new Date(dueDate) < new Date();\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const statuses = [\"all\", \"active\", \"returned\", \"overdue\"];\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"animate-pulse space-y-4\">\n              <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n              <div className=\"h-64 bg-muted rounded\"></div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"border-border\">\n        <CardHeader>\n          <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center space-y-4 sm:space-y-0\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <HandHeart className=\"w-5 h-5\" />\n              Borrowing Management\n            </CardTitle>\n            <Button \n              onClick={() => setShowBorrowModal(true)}\n              data-testid=\"button-borrow-book\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Borrow Book\n            </Button>\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          {/* Filters */}\n          <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n            <Select value={status} onValueChange={setStatus}>\n              <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                {statuses.map((s) => (\n                  <SelectItem key={s} value={s}>\n                    {s === 'all' ? 'All Status' : s.charAt(0).toUpperCase() + s.slice(1)}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Borrowings Table */}\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Book</TableHead>\n                  {user?.role === 'admin' && <TableHead>Borrower</TableHead>}\n                  <TableHead>Borrow Date</TableHead>\n                  <TableHead>Due Date</TableHead>\n                  <TableHead>Return Date</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {borrowingsData?.borrowings?.map((borrowing: any) => (\n                  <TableRow key={borrowing.id} data-testid={`row-borrowing-${borrowing.id}`}>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-8 h-10 bg-primary rounded flex items-center justify-center\">\n                          <HandHeart className=\"w-4 h-4 text-primary-foreground\" />\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-foreground\" data-testid={`text-book-title-${borrowing.id}`}>\n                            {borrowing.book?.title}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\" data-testid={`text-book-author-${borrowing.id}`}>\n                            by {borrowing.book?.author}\n                          </p>\n                        </div>\n                      </div>\n                    </TableCell>\n                    \n                    {user?.role === 'admin' && (\n                      <TableCell>\n                        <div>\n                          <p className=\"font-medium text-foreground\" data-testid={`text-borrower-name-${borrowing.id}`}>\n                            {borrowing.user?.firstName} {borrowing.user?.lastName}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\" data-testid={`text-borrower-email-${borrowing.id}`}>\n                            {borrowing.user?.email}\n                          </p>\n                        </div>\n                      </TableCell>\n                    )}\n                    \n                    <TableCell className=\"text-foreground\" data-testid={`text-borrow-date-${borrowing.id}`}>\n                      {formatDate(borrowing.borrowDate)}\n                    </TableCell>\n                    \n                    <TableCell data-testid={`text-due-date-${borrowing.id}`}>\n                      <span className={isOverdue(borrowing.dueDate) && borrowing.status === 'active' ? 'text-destructive font-medium' : 'text-foreground'}>\n                        {formatDate(borrowing.dueDate)}\n                      </span>\n                    </TableCell>\n                    \n                    <TableCell className=\"text-foreground\" data-testid={`text-return-date-${borrowing.id}`}>\n                      {borrowing.returnDate ? formatDate(borrowing.returnDate) : '-'}\n                    </TableCell>\n                    \n                    <TableCell>\n                      <Badge \n                        variant={\n                          borrowing.status === 'active' ? (isOverdue(borrowing.dueDate) ? \"destructive\" : \"default\") :\n                          borrowing.status === 'returned' ? \"secondary\" : \"destructive\"\n                        }\n                        data-testid={`badge-status-${borrowing.id}`}\n                      >\n                        <div className=\"flex items-center gap-1\">\n                          {borrowing.status === 'active' && !isOverdue(borrowing.dueDate) && <Clock className=\"w-3 h-3\" />}\n                          {borrowing.status === 'active' && isOverdue(borrowing.dueDate) && <Clock className=\"w-3 h-3\" />}\n                          {borrowing.status === 'returned' && <CheckCircle className=\"w-3 h-3\" />}\n                          {borrowing.status === 'active' && isOverdue(borrowing.dueDate) ? 'Overdue' : \n                           borrowing.status.charAt(0).toUpperCase() + borrowing.status.slice(1)}\n                        </div>\n                      </Badge>\n                    </TableCell>\n                    \n                    <TableCell>\n                      {borrowing.status === 'active' && (\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => handleReturn(borrowing.id, borrowing.book?.title)}\n                          disabled={returnMutation.isPending}\n                          data-testid={`button-return-${borrowing.id}`}\n                        >\n                          <RotateCcw className=\"w-4 h-4 mr-1\" />\n                          Return\n                        </Button>\n                      )}\n                    </TableCell>\n                  </TableRow>\n                )) || []}\n              </TableBody>\n            </Table>\n            \n            {(!borrowingsData?.borrowings || borrowingsData.borrowings.length === 0) && (\n              <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"text-no-borrowings\">\n                No borrowings found\n              </div>\n            )}\n          </div>\n\n          {/* Pagination */}\n          {borrowingsData?.total && borrowingsData.total > 10 && (\n            <div className=\"flex items-center justify-between mt-6\">\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"text-pagination-info\">\n                Showing {Math.min(10, borrowingsData.borrowings?.length || 0)} of {borrowingsData.total} borrowings\n              </p>\n              <div className=\"flex space-x-2\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  disabled={page === 1}\n                  onClick={() => setPage(p => Math.max(1, p - 1))}\n                  data-testid=\"button-prev-page\"\n                >\n                  Previous\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  disabled={page * 10 >= borrowingsData.total}\n                  onClick={() => setPage(p => p + 1)}\n                  data-testid=\"button-next-page\"\n                >\n                  Next\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <BorrowBookModal \n        open={showBorrowModal} \n        onOpenChange={setShowBorrowModal} \n      />\n    </div>\n  );\n}\n","size_bytes":11032},"client/src/pages/borrowings.tsx":{"content":"/**\n * ========================================================================\n * BORROWINGS MANAGEMENT PAGE - TRANG QUẢN LÝ MƯỢN SÁCH\n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Trang quản lý các giao dịch mượn sách với các tính năng:\n * - Xem danh sách sách đang mượn/đã trả\n * - Lọc theo trạng thái (active, returned, overdue)\n * - Return sách cho borrowings đang active\n * - Detect và highlight overdue borrowings\n * - Admin view: xem thông tin người mượn\n */\nimport { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { HandHeart, Plus, RotateCcw, Clock, CheckCircle } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport BorrowBookModal from \"@/components/modals/borrow-book-modal\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\n/**\n * Borrowings management component\n * \n * Features:\n * - Filter theo status: all, active, returned, overdue\n * - Return book functionality cho active borrowings\n * - Overdue detection với visual highlighting\n * - Role-based views: users chỉ thấy borrowings của mình, admin thấy tất cả\n * - Pagination support cho large datasets\n * \n * Permissions:\n * - Users: chỉ xem và return sách của mình\n * - Admin: xem tất cả borrowings, include borrower information\n */\nexport default function Borrowings() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  /**\n   * ========================================================================\n   * STATE MANAGEMENT - QUẢN LÝ STATE\n   * ========================================================================\n   */\n  \n  const [status, setStatus] = useState(\"all\");        // Filter theo borrowing status\n  const [page, setPage] = useState(1);               // Pagination state\n  const [showBorrowModal, setShowBorrowModal] = useState(false);  // Modal for borrowing new books\n\n  const { data: borrowingsData, isLoading } = useQuery({\n    queryKey: [\"/api/borrowings\", { status, page }],\n  });\n\n  const returnMutation = useMutation({\n    mutationFn: async (borrowingId: number) => {\n      await apiRequest(\"PUT\", `/api/borrowings/${borrowingId}/return`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/borrowings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Book returned successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to return book\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleReturn = (borrowingId: number, bookTitle: string) => {\n    if (confirm(`Are you sure you want to return \"${bookTitle}\"?`)) {\n      returnMutation.mutate(borrowingId);\n    }\n  };\n\n  const isOverdue = (dueDate: string) => {\n    return new Date(dueDate) < new Date();\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const statuses = [\"all\", \"active\", \"returned\", \"overdue\"];\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"animate-pulse space-y-4\">\n              <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n              <div className=\"h-64 bg-muted rounded\"></div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"border-border\">\n        <CardHeader>\n          <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center space-y-4 sm:space-y-0\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <HandHeart className=\"w-5 h-5\" />\n              Borrowing Management\n            </CardTitle>\n            <Button \n              onClick={() => setShowBorrowModal(true)}\n              data-testid=\"button-borrow-book\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Borrow Book\n            </Button>\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          {/* Filters */}\n          <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n            <Select value={status} onValueChange={setStatus}>\n              <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                {statuses.map((s) => (\n                  <SelectItem key={s} value={s}>\n                    {s === 'all' ? 'All Status' : s.charAt(0).toUpperCase() + s.slice(1)}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Borrowings Table */}\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Book</TableHead>\n                  {user?.role === 'admin' && <TableHead>Borrower</TableHead>}\n                  <TableHead>Borrow Date</TableHead>\n                  <TableHead>Due Date</TableHead>\n                  <TableHead>Return Date</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {borrowingsData?.borrowings?.map((borrowing: any) => (\n                  <TableRow key={borrowing.id} data-testid={`row-borrowing-${borrowing.id}`}>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-8 h-10 bg-primary rounded flex items-center justify-center\">\n                          <HandHeart className=\"w-4 h-4 text-primary-foreground\" />\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-foreground\" data-testid={`text-book-title-${borrowing.id}`}>\n                            {borrowing.book?.title}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\" data-testid={`text-book-author-${borrowing.id}`}>\n                            by {borrowing.book?.author}\n                          </p>\n                        </div>\n                      </div>\n                    </TableCell>\n                    \n                    {user?.role === 'admin' && (\n                      <TableCell>\n                        <div>\n                          <p className=\"font-medium text-foreground\" data-testid={`text-borrower-name-${borrowing.id}`}>\n                            {borrowing.user?.firstName} {borrowing.user?.lastName}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\" data-testid={`text-borrower-email-${borrowing.id}`}>\n                            {borrowing.user?.email}\n                          </p>\n                        </div>\n                      </TableCell>\n                    )}\n                    \n                    <TableCell className=\"text-foreground\" data-testid={`text-borrow-date-${borrowing.id}`}>\n                      {formatDate(borrowing.borrowDate)}\n                    </TableCell>\n                    \n                    <TableCell data-testid={`text-due-date-${borrowing.id}`}>\n                      <span className={isOverdue(borrowing.dueDate) && borrowing.status === 'active' ? 'text-destructive font-medium' : 'text-foreground'}>\n                        {formatDate(borrowing.dueDate)}\n                      </span>\n                    </TableCell>\n                    \n                    <TableCell className=\"text-foreground\" data-testid={`text-return-date-${borrowing.id}`}>\n                      {borrowing.returnDate ? formatDate(borrowing.returnDate) : '-'}\n                    </TableCell>\n                    \n                    <TableCell>\n                      <Badge \n                        variant={\n                          borrowing.status === 'active' ? (isOverdue(borrowing.dueDate) ? \"destructive\" : \"default\") :\n                          borrowing.status === 'returned' ? \"secondary\" : \"destructive\"\n                        }\n                        data-testid={`badge-status-${borrowing.id}`}\n                      >\n                        <div className=\"flex items-center gap-1\">\n                          {borrowing.status === 'active' && !isOverdue(borrowing.dueDate) && <Clock className=\"w-3 h-3\" />}\n                          {borrowing.status === 'active' && isOverdue(borrowing.dueDate) && <Clock className=\"w-3 h-3\" />}\n                          {borrowing.status === 'returned' && <CheckCircle className=\"w-3 h-3\" />}\n                          {borrowing.status === 'active' && isOverdue(borrowing.dueDate) ? 'Overdue' : \n                           borrowing.status.charAt(0).toUpperCase() + borrowing.status.slice(1)}\n                        </div>\n                      </Badge>\n                    </TableCell>\n                    \n                    <TableCell>\n                      {borrowing.status === 'active' && (\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => handleReturn(borrowing.id, borrowing.book?.title)}\n                          disabled={returnMutation.isPending}\n                          data-testid={`button-return-${borrowing.id}`}\n                        >\n                          <RotateCcw className=\"w-4 h-4 mr-1\" />\n                          Return\n                        </Button>\n                      )}\n                    </TableCell>\n                  </TableRow>\n                )) || []}\n              </TableBody>\n            </Table>\n            \n            {(!borrowingsData?.borrowings || borrowingsData.borrowings.length === 0) && (\n              <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"text-no-borrowings\">\n                No borrowings found\n              </div>\n            )}\n          </div>\n\n          {/* Pagination */}\n          {borrowingsData?.total && borrowingsData.total > 10 && (\n            <div className=\"flex items-center justify-between mt-6\">\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"text-pagination-info\">\n                Showing {Math.min(10, borrowingsData.borrowings?.length || 0)} of {borrowingsData.total} borrowings\n              </p>\n              <div className=\"flex space-x-2\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  disabled={page === 1}\n                  onClick={() => setPage(p => Math.max(1, p - 1))}\n                  data-testid=\"button-prev-page\"\n                >\n                  Previous\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  disabled={page * 10 >= borrowingsData.total}\n                  onClick={() => setPage(p => p + 1)}\n                  data-testid=\"button-next-page\"\n                >\n                  Next\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <BorrowBookModal \n        open={showBorrowModal} \n        onOpenChange={setShowBorrowModal} \n      />\n    </div>\n  );\n}\n","size_bytes":12460},"client/src/pages/dashboard.tsx":{"content":"/**\n * ========================================================================\n * DASHBOARD PAGE - TRANG DASHBOARD CHÍNH\n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Trang dashboard chính hiển thị tổng quan về hệ thống thư viện.\n * Bao gồm: thống kê, hoạt động gần đây, và các quick actions.\n */\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { BookOpen, Users, Clock, AlertTriangle, TrendingUp, Plus, UserPlus, FileText, HandHeart } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { AddBookModal } from \"@/components/modals/add-book-modal\";\nimport BorrowBookModal from \"@/components/modals/borrow-book-modal\";\nimport { AddAdminModal } from \"@/components/modals/add-admin-modal\";\n\n/**\n * Dashboard component hiển thị trang chủ với overview của hệ thống\n * \n * Features:\n * - Thống kê tổng quan: tổng số sách, đang mượn, quá hạn, users\n * - Feed hoạt động gần đây\n * - Quick actions cho admin (thêm sách, thêm admin)\n * - Modal management cho các actions\n * \n * Permissions:\n * - Tất cả users có thể xem dashboard\n * - Admin có thêm quick actions và modals\n */\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  \n  // Modal state management\n  const [showAddBookModal, setShowAddBookModal] = useState(false);\n  const [showBorrowModal, setShowBorrowModal] = useState(false);\n  const [showAddAdminModal, setShowAddAdminModal] = useState(false);\n\n  /**\n   * ========================================================================\n   * DATA FETCHING - FETCH DỮ LIỆU\n   * ========================================================================\n   */\n\n  // Fetch dashboard statistics (tổng số sách, mượn, quá hạn, users)\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  // Fetch activity logs cho recent activity section\n  const { data: activityLogs, isLoading: activityLoading } = useQuery({\n    queryKey: [\"/api/activity-logs\"],\n    enabled: !!user,                         // Chỉ fetch khi user đã load\n  });\n\n  /**\n   * ========================================================================\n   * LOADING STATE - TRẠNG THÁI LOADING\n   * ========================================================================\n   */\n\n  // Loading state với skeleton cards\n  if (statsLoading || activityLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-20 bg-muted rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * ========================================================================\n   * MAIN DASHBOARD RENDER - RENDER DASHBOARD CHÍNH\n   * ========================================================================\n   */\n\n  return (\n    <div className=\"space-y-6\">\n      {/* ====================================================================\n          STATISTICS CARDS - THẺ THỐNG KÊ\n          Hiển thị 4 metrics chính: books, borrowings, overdue, users\n          ==================================================================== */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"border-border\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Books</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-total-books\">\n                  {stats?.totalBooks || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center\">\n                <BookOpen className=\"w-6 h-6 text-primary-foreground\" />\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <TrendingUp className=\"w-4 h-4 text-accent mr-1\" />\n              <span className=\"text-muted-foreground\">in collection</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-border\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Currently Borrowed</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-active-borrowings\">\n                  {stats?.activeBorrowings || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-accent rounded-lg flex items-center justify-center\">\n                <HandHeart className=\"w-6 h-6 text-accent-foreground\" />\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <span className=\"text-accent\">Active</span>\n              <span className=\"text-muted-foreground ml-1\">borrowings</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-border\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Overdue</p>\n                <p className=\"text-2xl font-bold text-destructive\" data-testid=\"text-overdue-borrowings\">\n                  {stats?.overdueBorrowings || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-destructive rounded-lg flex items-center justify-center\">\n                <AlertTriangle className=\"w-6 h-6 text-destructive-foreground\" />\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <span className=\"text-destructive\">Needs attention</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-border\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Users</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-total-users\">\n                  {stats?.totalUsers || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-secondary rounded-lg flex items-center justify-center\">\n                <Users className=\"w-6 h-6 text-secondary-foreground\" />\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <span className=\"text-accent\">Registered</span>\n              <span className=\"text-muted-foreground ml-1\">members</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Recent Activity */}\n        <div className=\"lg:col-span-2\">\n          <Card className=\"border-border\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Recent Activity</CardTitle>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  onClick={() => setLocation('/activity')}\n                  data-testid=\"button-view-all-activity\"\n                >\n                  View All\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {activityLogs?.logs?.slice(0, 5).map((log: any) => (\n                  <div key={log.id} className=\"flex items-center space-x-4 p-4 hover:bg-muted rounded-lg transition-colors\" data-testid={`activity-${log.id}`}>\n                    <div className=\"w-10 h-10 bg-accent rounded-full flex items-center justify-center\">\n                      {log.action.includes('borrowed') && <HandHeart className=\"w-4 h-4 text-accent-foreground\" />}\n                      {log.action.includes('returned') && <BookOpen className=\"w-4 h-4 text-accent-foreground\" />}\n                      {log.action.includes('added') && <Plus className=\"w-4 h-4 text-accent-foreground\" />}\n                      {log.action.includes('updated') && <FileText className=\"w-4 h-4 text-accent-foreground\" />}\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium text-foreground\" data-testid={`text-activity-details-${log.id}`}>\n                        {log.details}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\" data-testid={`text-activity-time-${log.id}`}>\n                        {new Date(log.timestamp).toLocaleString()}\n                      </p>\n                    </div>\n                    <Badge variant={\n                      log.action.includes('borrowed') ? 'default' :\n                      log.action.includes('returned') ? 'secondary' :\n                      log.action.includes('added') ? 'outline' : 'destructive'\n                    } data-testid={`badge-activity-action-${log.id}`}>\n                      {log.action.replace('_', ' ')}\n                    </Badge>\n                  </div>\n                )) || []}\n                \n                {(!activityLogs?.logs || activityLogs.logs.length === 0) && (\n                  <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"text-no-activity\">\n                    No recent activity\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"space-y-6\">\n          {/* Quick Actions */}\n          <Card className=\"border-border\">\n            <CardHeader>\n              <CardTitle>Quick Actions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {user?.role === 'admin' && (\n                  <Button \n                    className=\"w-full justify-start\" \n                    onClick={() => setShowAddBookModal(true)}\n                    data-testid=\"button-add-book\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add New Book\n                  </Button>\n                )}\n                \n                {user?.role === 'admin' && (\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full justify-start\" \n                    onClick={() => setShowAddAdminModal(true)}\n                    data-testid=\"button-add-admin\"\n                  >\n                    <UserPlus className=\"w-4 h-4 mr-2\" />\n                    Add Admin\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n        </div>\n      </div>\n\n      {/* Modals */}\n      <AddBookModal \n        open={showAddBookModal} \n        onOpenChange={setShowAddBookModal} \n      />\n      <BorrowBookModal \n        open={showBorrowModal} \n        onOpenChange={setShowBorrowModal} \n      />\n      <AddAdminModal \n        open={showAddAdminModal} \n        onOpenChange={setShowAddAdminModal} \n      />\n    </div>\n  );\n}\n","size_bytes":11870},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { BookOpen, Users, Clock, Search } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Hero Section */}\n      <div className=\"relative overflow-hidden bg-gradient-to-br from-primary/10 via-background to-accent/10\">\n        <div className=\"container mx-auto px-6 py-24\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <div className=\"mb-8\">\n              <div className=\"w-16 h-16 bg-primary rounded-lg flex items-center justify-center mx-auto mb-6\">\n                <BookOpen className=\"w-8 h-8 text-primary-foreground\" />\n              </div>\n              <h1 className=\"text-4xl md:text-6xl font-bold text-foreground mb-6\">\n                Mini Library\n                <span className=\"text-primary\"> Management</span>\n              </h1>\n              <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n                A comprehensive digital library system for managing books, borrowings, and user activities with real-time tracking and analytics.\n              </p>\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                size=\"lg\" \n                className=\"text-lg px-8 py-6\"\n                onClick={() => window.location.href = '/api/login'}\n                data-testid=\"button-login\"\n              >\n                Get Started\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"lg\" \n                className=\"text-lg px-8 py-6\"\n                data-testid=\"button-learn-more\"\n              >\n                Learn More\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Features Section */}\n      <div className=\"py-24 bg-card\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n              Powerful Library Management Features\n            </h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Everything you need to manage a modern library efficiently and effectively.\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <Card className=\"text-center border-border hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <BookOpen className=\"w-6 h-6 text-primary\" />\n                </div>\n                <CardTitle>Book Management</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <CardDescription>\n                  Add, edit, and organize your book collection with detailed information including genres, authors, and availability status.\n                </CardDescription>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center border-border hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Users className=\"w-6 h-6 text-accent\" />\n                </div>\n                <CardTitle>User Management</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <CardDescription>\n                  Manage library members with role-based access control for admins and regular users with complete activity tracking.\n                </CardDescription>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center border-border hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Clock className=\"w-6 h-6 text-secondary-foreground\" />\n                </div>\n                <CardTitle>Borrowing System</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <CardDescription>\n                  Track book borrowings and returns with due dates, overdue notifications, and real-time availability updates.\n                </CardDescription>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center border-border hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-muted/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Search className=\"w-6 h-6 text-muted-foreground\" />\n                </div>\n                <CardTitle>Smart Search</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <CardDescription>\n                  Find books quickly with advanced search and filtering by title, author, genre, and availability status.\n                </CardDescription>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Stats Section */}\n      <div className=\"py-24 bg-background\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"grid md:grid-cols-3 gap-8 text-center\">\n            <div>\n              <div className=\"text-4xl font-bold text-primary mb-2\" data-testid=\"text-stat-books\">\n                2,847+\n              </div>\n              <div className=\"text-lg text-muted-foreground\">Books Managed</div>\n            </div>\n            <div>\n              <div className=\"text-4xl font-bold text-accent mb-2\" data-testid=\"text-stat-users\">\n                1,156+\n              </div>\n              <div className=\"text-lg text-muted-foreground\">Active Users</div>\n            </div>\n            <div>\n              <div className=\"text-4xl font-bold text-secondary-foreground mb-2\" data-testid=\"text-stat-transactions\">\n                15,420+\n              </div>\n              <div className=\"text-lg text-muted-foreground\">Transactions</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* CTA Section */}\n      <div className=\"py-24 bg-primary\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-primary-foreground mb-6\">\n            Ready to Transform Your Library?\n          </h2>\n          <p className=\"text-xl text-primary-foreground/80 mb-8 max-w-2xl mx-auto\">\n            Join thousands of libraries already using our system to streamline their operations.\n          </p>\n          <Button \n            size=\"lg\" \n            variant=\"secondary\"\n            className=\"text-lg px-8 py-6\"\n            onClick={() => window.location.href = '/api/login'}\n            data-testid=\"button-get-started-cta\"\n          >\n            Get Started Today\n          </Button>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"bg-card border-t border-border py-12\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <BookOpen className=\"w-4 h-4 text-primary-foreground\" />\n            </div>\n            <span className=\"text-lg font-semibold text-foreground\">LibraryMS</span>\n          </div>\n          <p className=\"text-muted-foreground\">\n            © 2025 Mini Library Management System. Built with modern technology for efficient library operations.\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":7871},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { BookOpen, Eye, EyeOff } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\n\nexport default function Login() {\n  const [isRegisterMode, setIsRegisterMode] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [, setLocation] = useLocation();\n  \n  const { refetch } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n    setIsLoading(true);\n\n    try {\n      if (isRegisterMode) {\n        // Registration\n        if (password !== confirmPassword) {\n          setError(\"Mật khẩu xác nhận không khớp\");\n          setIsLoading(false);\n          return;\n        }\n\n        const response = await fetch(\"/api/auth/register\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          credentials: \"include\",\n          body: JSON.stringify({ username, password, confirmPassword, email, firstName, lastName }),\n        });\n\n        if (response.ok) {\n          await refetch();\n          // Navigate to dashboard after successful registration\n          setLocation(\"/\");\n        } else {\n          const errorData = await response.json();\n          setError(errorData.message || \"Đăng ký thất bại\");\n        }\n      } else {\n        // Login\n        const response = await fetch(\"/api/auth/login\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          credentials: \"include\",\n          body: JSON.stringify({ username, password }),\n        });\n\n        if (response.ok) {\n          await refetch();\n          // Navigate to dashboard after successful login\n          setLocation(\"/\");\n        } else {\n          const errorData = await response.json();\n          setError(errorData.message || \"Đăng nhập thất bại\");\n        }\n      }\n    } catch (err) {\n      setError(\"Lỗi kết nối. Vui lòng thử lại.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/10 via-background to-accent/10\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"w-16 h-16 bg-primary rounded-lg flex items-center justify-center mx-auto mb-4\">\n            <BookOpen className=\"w-8 h-8 text-primary-foreground\" />\n          </div>\n          <CardTitle className=\"text-2xl\">\n            {isRegisterMode ? \"Tạo tài khoản mới\" : \"Đăng nhập hệ thống\"}\n          </CardTitle>\n          <CardDescription>\n            {isRegisterMode \n              ? \"Nhập thông tin để tạo tài khoản mới cho hệ thống quản lý thư viện\"\n              : \"Nhập thông tin đăng nhập để truy cập hệ thống quản lý thư viện\"\n            }\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {isRegisterMode && (\n              <>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"firstName\">Họ</Label>\n                    <Input\n                      id=\"firstName\"\n                      type=\"text\"\n                      value={firstName}\n                      onChange={(e) => setFirstName(e.target.value)}\n                      required\n                      placeholder=\"Nhập họ\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"lastName\">Tên</Label>\n                    <Input\n                      id=\"lastName\"\n                      type=\"text\"\n                      value={lastName}\n                      onChange={(e) => setLastName(e.target.value)}\n                      required\n                      placeholder=\"Nhập tên\"\n                    />\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    required\n                    placeholder=\"Nhập email\"\n                  />\n                </div>\n              </>\n            )}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Tên đăng nhập</Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                required\n                placeholder=\"Nhập tên đăng nhập\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Mật khẩu</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                  placeholder=\"Nhập mật khẩu\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n            {isRegisterMode && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\">Xác nhận mật khẩu</Label>\n                <Input\n                  id=\"confirmPassword\"\n                  type=\"password\"\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  required\n                  placeholder=\"Nhập lại mật khẩu\"\n                />\n              </div>\n            )}\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n            <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n              {isLoading \n                ? (isRegisterMode ? \"Đang tạo tài khoản...\" : \"Đang đăng nhập...\")\n                : (isRegisterMode ? \"Tạo tài khoản\" : \"Đăng nhập\")\n              }\n            </Button>\n            <div className=\"text-center\">\n              <Button\n                type=\"button\"\n                variant=\"link\"\n                onClick={() => {\n                  setIsRegisterMode(!isRegisterMode);\n                  setError(\"\");\n                  setUsername(\"\");\n                  setPassword(\"\");\n                  setConfirmPassword(\"\");\n                  setEmail(\"\");\n                  setFirstName(\"\");\n                  setLastName(\"\");\n                }}\n                className=\"text-sm\"\n              >\n                {isRegisterMode \n                  ? \"Đã có tài khoản? Đăng nhập tại đây\"\n                  : \"Chưa có tài khoản? Tạo tài khoản mới\"\n                }\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8507},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/users.tsx":{"content":"/**\n * ========================================================================\n * USERS MANAGEMENT PAGE - TRANG QUẢN LÝ NGƯỜI DÙNG  \n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Trang quản lý users - CHỈ DÀNH CHO ADMIN.\n * Các tính năng:\n * - Xem danh sách tất cả users trong hệ thống\n * - Tìm kiếm theo tên hoặc email\n * - Lọc theo role (admin/user)\n * - Thay đổi role của users\n * - Xóa users (chỉ regular users, không xóa admin)\n * - Thêm user mới\n */\nimport { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Users as UsersIcon, Plus, Search, Crown, User, UserCog, Trash2 } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AddUserModal from \"@/components/modals/add-user-modal\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useEffect } from \"react\";\n\n/**\n * Users management component - ADMIN ONLY\n * \n * Features:\n * - Search users by name hoặc email\n * - Role-based filtering (admin, user, all)\n * - Role management: change user ↔ admin\n * - User deletion (chỉ regular users, protect admins)\n * - Add new users với initial role\n * - Profile image support\n * \n * Security:\n * - Route protection: redirect non-admins\n * - Self-protection: admin không thể xóa chính mình\n * - Role protection: không thể xóa admins khác\n * \n * Permissions:\n * - CHỈ admin có thể access trang này\n * - Admin có thể manage tất cả users\n */\nexport default function Users() {\n  const { user, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  /**\n   * ========================================================================\n   * STATE MANAGEMENT - QUẢN LÝ STATE\n   * ========================================================================\n   */\n  \n  // Search state (tương tự Books page pattern)\n  const [search, setSearch] = useState(\"\");           // Actual search term for API\n  const [searchInput, setSearchInput] = useState(\"\"); // Real-time input value\n  const [role, setRole] = useState(\"all\");           // Role filter\n  const [page, setPage] = useState(1);               // Pagination\n  const [showAddModal, setShowAddModal] = useState(false);  // Add user modal\n\n  const handleSearch = () => {\n    setSearch(searchInput);\n    setPage(1); // Reset to first page when searching\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  // Redirect if not admin\n  useEffect(() => {\n    if (!authLoading && user && user.role !== 'admin') {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Admin access required\",\n        variant: \"destructive\",\n      });\n      // Could redirect to dashboard instead\n      window.history.back();\n    }\n  }, [user, authLoading, toast]);\n\n  const { data: usersData, isLoading } = useQuery({\n    queryKey: [\"/api/users\", { search, role, page }],\n    enabled: user?.role === 'admin',\n  });\n\n  const updateRoleMutation = useMutation({\n    mutationFn: async ({ userId, newRole }: { userId: string; newRole: string }) => {\n      await apiRequest(\"PUT\", `/api/users/${userId}/role`, { role: newRole });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User role updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (targetUserId: string) => {\n      await apiRequest(\"DELETE\", `/api/users/${targetUserId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"User deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRoleChange = (userId: string, newRole: string, userEmail: string) => {\n    if (confirm(`Are you sure you want to change ${userEmail}'s role to ${newRole}?`)) {\n      updateRoleMutation.mutate({ userId, newRole });\n    }\n  };\n\n  const handleDeleteUser = (targetUserId: string, userEmail: string) => {\n    if (confirm(`Are you sure you want to delete user \"${userEmail}\"? This action cannot be undone.`)) {\n      deleteUserMutation.mutate(targetUserId);\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const roles = [\"all\", \"admin\", \"user\"];\n\n  if (authLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"animate-pulse space-y-4\">\n              <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n              <div className=\"h-64 bg-muted rounded\"></div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Show nothing if not admin (will redirect)\n  if (user?.role !== 'admin') {\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"animate-pulse space-y-4\">\n              <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n              <div className=\"h-64 bg-muted rounded\"></div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"border-border\">\n        <CardHeader>\n          <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center space-y-4 sm:space-y-0\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <UsersIcon className=\"w-5 h-5\" />\n              User Management\n            </CardTitle>\n            <Button \n              onClick={() => setShowAddModal(true)}\n              data-testid=\"button-add-new-user\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add New User\n            </Button>\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          {/* Search and Filters */}\n          <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n            <div className=\"flex gap-2 flex-1\">\n              <div className=\"flex-1 relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  placeholder=\"Search by name or email...\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-users\"\n                />\n              </div>\n              \n              <Button onClick={handleSearch} data-testid=\"button-search-users\">\n                <Search className=\"w-4 h-4 mr-2\" />\n                Search\n              </Button>\n            </div>\n            \n            <Select value={role} onValueChange={setRole}>\n              <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"select-role-filter\">\n                <SelectValue placeholder=\"All Roles\" />\n              </SelectTrigger>\n              <SelectContent>\n                {roles.map((r) => (\n                  <SelectItem key={r} value={r}>\n                    {r === 'all' ? 'All Roles' : r.charAt(0).toUpperCase() + r.slice(1)}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Users Table */}\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>User</TableHead>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Role</TableHead>\n                  <TableHead>Joined Date</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {(usersData as any)?.users?.map((userData: any) => (\n                  <TableRow key={userData.id} data-testid={`row-user-${userData.id}`}>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-accent rounded-full flex items-center justify-center\">\n                          {userData.profileImageUrl ? (\n                            <img \n                              src={userData.profileImageUrl} \n                              alt=\"Profile\" \n                              className=\"w-10 h-10 rounded-full object-cover\"\n                            />\n                          ) : (\n                            <User className=\"w-5 h-5 text-accent-foreground\" />\n                          )}\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-foreground\" data-testid={`text-user-name-${userData.id}`}>\n                            {userData.firstName || userData.lastName ? \n                              `${userData.firstName || ''} ${userData.lastName || ''}`.trim() : \n                              'No name provided'\n                            }\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\" data-testid={`text-user-id-${userData.id}`}>\n                            ID: {userData.id.slice(0, 8)}...\n                          </p>\n                        </div>\n                      </div>\n                    </TableCell>\n                    \n                    <TableCell className=\"text-foreground\" data-testid={`text-user-email-${userData.id}`}>\n                      {userData.email || 'No email'}\n                    </TableCell>\n                    \n                    <TableCell>\n                      <Badge \n                        variant={userData.role === 'admin' ? \"default\" : \"secondary\"}\n                        data-testid={`badge-user-role-${userData.id}`}\n                      >\n                        <div className=\"flex items-center gap-1\">\n                          {userData.role === 'admin' ? (\n                            <Crown className=\"w-3 h-3\" />\n                          ) : (\n                            <User className=\"w-3 h-3\" />\n                          )}\n                          {userData.role.charAt(0).toUpperCase() + userData.role.slice(1)}\n                        </div>\n                      </Badge>\n                    </TableCell>\n                    \n                    <TableCell className=\"text-foreground\" data-testid={`text-user-joined-${userData.id}`}>\n                      {formatDate(userData.createdAt)}\n                    </TableCell>\n                    \n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        <Select\n                          value={userData.role}\n                          onValueChange={(newRole) => handleRoleChange(userData.id, newRole, userData.email)}\n                          disabled={updateRoleMutation.isPending || userData.id === user.id}\n                        >\n                          <SelectTrigger className=\"w-24\" data-testid={`select-change-role-${userData.id}`}>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"user\">User</SelectItem>\n                            <SelectItem value=\"admin\">Admin</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        \n                        {/* Delete button - only for regular users, not admins or self */}\n                        {userData.role === 'user' && userData.id !== user.id && (\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => handleDeleteUser(userData.id, userData.email)}\n                            disabled={deleteUserMutation.isPending}\n                            data-testid={`button-delete-user-${userData.id}`}\n                            className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                )) || []}\n              </TableBody>\n            </Table>\n            \n            {(!(usersData as any)?.users || (usersData as any).users.length === 0) && (\n              <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"text-no-users\">\n                No users found\n              </div>\n            )}\n          </div>\n\n          {/* Pagination */}\n          {(usersData as any)?.total && (usersData as any).total > 10 && (\n            <div className=\"flex items-center justify-between mt-6\">\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"text-pagination-info\">\n                Showing {Math.min(10, (usersData as any).users?.length || 0)} of {(usersData as any).total} users\n              </p>\n              <div className=\"flex space-x-2\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  disabled={page === 1}\n                  onClick={() => setPage(p => Math.max(1, p - 1))}\n                  data-testid=\"button-prev-page\"\n                >\n                  Previous\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  disabled={page * 10 >= (usersData as any).total}\n                  onClick={() => setPage(p => p + 1)}\n                  data-testid=\"button-next-page\"\n                >\n                  Next\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <AddUserModal \n        open={showAddModal} \n        onOpenChange={setShowAddModal} \n      />\n    </div>\n  );\n}\n","size_bytes":15798},"client/src/components/layout/sidebar.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { BookOpen, BarChart3, Users, HandHeart, History, LogOut, Menu, X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useState } from \"react\";\n\ninterface SidebarProps {\n  className?: string;\n}\n\nexport function Sidebar({ className }: SidebarProps) {\n  const [location, setLocation] = useLocation();\n  const { user } = useAuth();\n  const [isMobileOpen, setIsMobileOpen] = useState(false);\n\n  const navigation = [\n    {\n      name: \"Dashboard\",\n      href: \"/\",\n      icon: BarChart3,\n      current: location === \"/\",\n    },\n    {\n      name: \"Books\",\n      href: \"/books\",\n      icon: BookOpen,\n      current: location === \"/books\",\n    },\n    {\n      name: \"Borrowing\",\n      href: \"/borrowing\",\n      icon: HandHeart,\n      current: location === \"/borrowing\",\n    },\n    ...(user?.role === 'admin' ? [{\n      name: \"Users\",\n      href: \"/users\",\n      icon: Users,\n      current: location === \"/users\",\n    }] : []),\n    {\n      name: \"Activity Log\",\n      href: \"/activity\",\n      icon: History,\n      current: location === \"/activity\",\n    },\n  ];\n\n  const handleLogout = () => {\n    window.location.href = '/api/logout';\n  };\n\n  const toggleMobile = () => {\n    setIsMobileOpen(!isMobileOpen);\n  };\n\n  return (\n    <>\n      {/* Mobile menu button */}\n      <div className=\"md:hidden fixed top-4 left-4 z-50\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={toggleMobile}\n          data-testid=\"button-mobile-menu\"\n        >\n          {isMobileOpen ? <X className=\"h-6 w-6\" /> : <Menu className=\"h-6 w-6\" />}\n        </Button>\n      </div>\n\n      {/* Backdrop */}\n      {isMobileOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden\"\n          onClick={() => setIsMobileOpen(false)}\n          data-testid=\"sidebar-backdrop\"\n        />\n      )}\n\n      {/* Sidebar */}\n      <div className={cn(\n        \"fixed md:relative w-64 bg-card shadow-lg border-r border-border z-50 h-full transition-transform duration-300\",\n        isMobileOpen ? \"translate-x-0\" : \"-translate-x-full md:translate-x-0\",\n        className\n      )} data-testid=\"sidebar\">\n        {/* Header */}\n        <div className=\"p-6 border-b border-border\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <BookOpen className=\"w-5 h-5 text-primary-foreground\" />\n            </div>\n            <div>\n              <h1 className=\"text-lg font-semibold text-foreground\" data-testid=\"text-app-title\">\n                LibraryMS\n              </h1>\n              <p className=\"text-sm text-muted-foreground\">v1.0</p>\n            </div>\n          </div>\n        </div>\n\n        {/* User Info */}\n        <div className=\"p-4 border-b border-border\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-accent rounded-full flex items-center justify-center overflow-hidden\">\n              {user?.profileImageUrl ? (\n                <img \n                  src={user.profileImageUrl} \n                  alt=\"Profile\" \n                  className=\"w-8 h-8 object-cover\"\n                />\n              ) : (\n                <BookOpen className=\"w-4 h-4 text-accent-foreground\" />\n              )}\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium text-foreground truncate\" data-testid=\"text-user-name\">\n                {user?.firstName || user?.lastName ? \n                  `${user.firstName || ''} ${user.lastName || ''}`.trim() : \n                  user?.email || 'User'\n                }\n              </p>\n              <Badge \n                variant={user?.role === 'admin' ? \"default\" : \"secondary\"}\n                className=\"text-xs\"\n                data-testid=\"badge-user-role\"\n              >\n                {user?.role === 'admin' ? 'Admin' : 'User'}\n              </Badge>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"p-4 space-y-2 flex-1\">\n          {navigation.map((item) => (\n            <Button\n              key={item.name}\n              variant={item.current ? \"default\" : \"ghost\"}\n              className={cn(\n                \"w-full justify-start\",\n                item.current && \"bg-primary text-primary-foreground hover:bg-primary/90\"\n              )}\n              onClick={() => {\n                setLocation(item.href);\n                setIsMobileOpen(false);\n              }}\n              data-testid={`nav-${item.name.toLowerCase().replace(' ', '-')}`}\n            >\n              <item.icon className=\"w-4 h-4 mr-3\" />\n              {item.name}\n            </Button>\n          ))}\n        </nav>\n\n        {/* Logout */}\n        <div className=\"p-4 border-t border-border\">\n          <Button\n            variant=\"ghost\"\n            className=\"w-full justify-start text-destructive hover:text-destructive hover:bg-destructive/10\"\n            onClick={handleLogout}\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"w-4 h-4 mr-3\" />\n            Logout\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":5386},"client/src/components/modals/add-book-modal.tsx":{"content":"/**\n * ========================================================================\n * ADD BOOK MODAL - MODAL THÊM SÁCH\n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Modal form để admin thêm sách mới vào hệ thống.\n * \n * Features:\n * - Form validation với Zod schema\n * - Genre selection với predefined options\n * - Quantity management\n * - Book ID (ISBN) validation\n * - Description field (optional)\n * \n * Flow:\n * 1. Admin điền form với book details\n * 2. Validation check các required fields\n * 3. Submit POST /api/books\n * 4. Invalidate queries để refresh book lists\n * 5. Show success message và close modal\n */\nimport { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\n/**\n * Zod schema validation cho add book form\n * Đảm bảo all required fields được provide và valid\n */\nconst addBookSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  author: z.string().min(1, \"Author is required\"),\n  isbn: z.string().min(1, \"Book ID is required\"),         // Book identifier (ISBN hoặc custom ID)\n  genre: z.string().min(1, \"Genre is required\"),\n  quantity: z.coerce.number().min(1, \"Quantity must be at least 1\"), // Số lượng sách có sẵn\n  description: z.string().optional(),                     // Mô tả sách (không bắt buộc)\n});\n\ntype AddBookFormData = z.infer<typeof addBookSchema>;\n\ninterface AddBookModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\n/**\n * Add Book Modal component - CHỈ ADMIN\n * \n * Responsibilities:\n * - Provide form để admin add new books\n * - Validate book data trước khi submit\n * - Handle API call và error states\n * - Update query cache sau khi success\n * \n * Permissions: Admin only (controlled by parent component)\n */\nexport function AddBookModal({ open, onOpenChange }: AddBookModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<AddBookFormData>({\n    resolver: zodResolver(addBookSchema),\n    defaultValues: {\n      title: \"\",\n      author: \"\",\n      isbn: \"\",\n      genre: \"\",\n      quantity: 1,\n      description: \"\",\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: AddBookFormData) => {\n      await apiRequest(\"POST\", \"/api/books\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/books\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Book added successfully\",\n      });\n      form.reset();\n      onOpenChange(false);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to add book\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: AddBookFormData) => {\n    mutation.mutate(data);\n  };\n\n  const genres = [\n    \"fiction\",\n    \"non-fiction\",\n    \"science\",\n    \"history\",\n    \"biography\",\n    \"mystery\",\n    \"romance\",\n    \"fantasy\",\n    \"thriller\",\n    \"self-help\",\n    \"technology\",\n    \"art\",\n    \"business\",\n    \"health\",\n    \"travel\",\n    \"cooking\",\n    \"other\",\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"modal-add-book\">\n        <DialogHeader>\n          <DialogTitle>Add New Book</DialogTitle>\n          <DialogDescription>\n            Add a new book to the library. If the Book ID already exists, the quantity will be added to the existing book. If it's a new Book ID, a new book will be created.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Title</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Enter book title\" \n                      {...field} \n                      data-testid=\"input-book-title\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"author\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Author</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Enter author name\" \n                      {...field} \n                      data-testid=\"input-book-author\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"isbn\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Book ID</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Enter unique book ID\" \n                      {...field} \n                      data-testid=\"input-book-id\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"genre\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Genre</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-book-genre\">\n                        <SelectValue placeholder=\"Select genre\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {genres.map((genre) => (\n                        <SelectItem key={genre} value={genre}>\n                          {genre.charAt(0).toUpperCase() + genre.slice(1)}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"quantity\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Quantity</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"number\" \n                      min=\"1\" \n                      placeholder=\"Enter quantity\" \n                      {...field} \n                      data-testid=\"input-book-quantity\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Enter book description\" \n                      {...field} \n                      data-testid=\"textarea-book-description\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex space-x-3 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                className=\"flex-1\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel-add-book\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"flex-1\"\n                disabled={mutation.isPending}\n                data-testid=\"button-submit-add-book\"\n              >\n                {mutation.isPending ? \"Adding...\" : \"Add Book\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9519},"client/src/components/modals/add-user-modal.tsx":{"content":"/**\n * ========================================================================\n * ADD USER MODAL - MODAL THÊM NGƯỜI DÙNG\n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Modal placeholder cho user management features.\n * Hiện tại chỉ hiển thị thông báo \"Coming Soon\".\n * \n * Status: PLACEHOLDER - Under Development\n * \n * Planned Features:\n * - User registration form\n * - Role assignment (admin/user)\n * - Profile information setup\n * - Email validation\n * \n * Current State:\n * - Authentication được handle bởi login system\n * - User management via existing auth flow\n * - Direct user creation chưa implement\n */\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface AddUserModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\n/**\n * Add User Modal component - PLACEHOLDER\n * \n * Responsibilities:\n * - Show development status cho user management\n * - Provide info về current authentication system\n * - Placeholder cho future user creation features\n * \n * Note: Actual user management được handle through auth system\n */\nexport default function AddUserModal({ open, onOpenChange }: AddUserModalProps) {\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\" data-testid=\"modal-add-user\">\n        <DialogHeader>\n          <DialogTitle>User Management</DialogTitle>\n        </DialogHeader>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto\">\n                <i className=\"fas fa-users text-muted-foreground text-xl\"></i>\n              </div>\n              \n              <div>\n                <h3 className=\"text-lg font-medium text-foreground\">Coming Soon</h3>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  User registration is handled through the authentication system. \n                  Direct user management features are currently under development.\n                </p>\n              </div>\n              \n              <div className=\"text-left space-y-2 text-sm text-muted-foreground\">\n                <p>Current user management features:</p>\n                <ul className=\"space-y-1 ml-4\">\n                  <li>• Users authenticate via the login system</li>\n                  <li>• Role assignment (admin/user)</li>\n                  <li>• Profile information sync</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <div className=\"flex justify-end pt-4\">\n          <Button onClick={() => onOpenChange(false)} data-testid=\"button-close\">\n            Close\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3110},"client/src/components/modals/borrow-book-modal.tsx":{"content":"/**\n * ========================================================================\n * BORROW BOOK MODAL - MODAL MƯỢN SÁCH\n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Modal form để users mượn sách từ thư viện.\n * \n * Features:\n * - Book search với real-time filtering\n * - Book selection với availability check\n * - Due date picker (default 2 weeks)\n * - Search dropdown với book suggestions\n * - Form validation và error handling\n * \n * Flow:\n * 1. User search book bằng title/author\n * 2. Select book từ dropdown suggestions\n * 3. Set due date (default hoặc custom)\n * 4. Submit borrowing request\n * 5. Update book availability và borrowing records\n */\nimport { useState, useEffect, useRef } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { addDays, format } from \"date-fns\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Search, Book } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\n/**\n * Zod schema validation cho borrow book form\n */\nconst borrowBookSchema = z.object({\n  bookId: z.string().min(1, \"Book selection is required\"),     // ID của sách được chọn\n  dueDate: z.string().min(1, \"Due date is required\"),          // Ngày hạn trả sách\n});\n\ninterface BorrowBookModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\n/**\n * Borrow Book Modal component\n * \n * Responsibilities:\n * - Provide book search và selection interface\n * - Handle due date calculation và validation\n * - Submit borrowing request với proper data\n * - Update cache để reflect availability changes\n * \n * UX Features:\n * - Auto-complete search dropdown\n * - Default due date (2 weeks from now)\n * - Real-time book availability filtering\n * - Outside click handling cho dropdown\n */\nexport default function BorrowBookModal({ open, onOpenChange }: BorrowBookModalProps) {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  \n  /**\n   * State management cho book search và selection\n   */\n  const [searchQuery, setSearchQuery] = useState(\"\");         // Search input value\n  const [showDropdown, setShowDropdown] = useState(false);    // Dropdown visibility\n  const [selectedBook, setSelectedBook] = useState<any>(null); // Selected book object\n  const searchAreaRef = useRef<HTMLDivElement>(null);         // Ref cho outside click detection\n  \n  const form = useForm<z.infer<typeof borrowBookSchema>>({\n    resolver: zodResolver(borrowBookSchema),\n    defaultValues: {\n      bookId: \"\",\n      dueDate: format(addDays(new Date(), 14), \"yyyy-MM-dd\"), // Default 2 weeks from now\n    },\n  });\n\n  const { data: books } = useQuery({\n    queryKey: [\"/api/books\", { status: \"available\" }],\n    enabled: open,\n  });\n\n  const borrowBookMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof borrowBookSchema>) => {\n      await apiRequest(\"POST\", \"/api/borrowings\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/borrowings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/books\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/activity-logs\"] });\n      toast({\n        title: \"Success\",\n        description: \"Book borrowed successfully\",\n      });\n      form.reset({\n        bookId: \"\",\n        dueDate: format(addDays(new Date(), 14), \"yyyy-MM-dd\"),\n      });\n      onOpenChange(false);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to process borrowing\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof borrowBookSchema>) => {\n    borrowBookMutation.mutate(data);\n  };\n\n  const availableBooks = (books as any)?.books?.filter((book: any) => book.availableQuantity > 0) || [];\n  \n  const filteredBooks = availableBooks.filter((book: any) =>\n    book.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    book.author.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    book.isbn?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleBookSelect = (book: any) => {\n    setSelectedBook(book);\n    setSearchQuery(`${book.title} by ${book.author}`);\n    form.setValue(\"bookId\", book.id.toString());\n    setShowDropdown(false);\n  };\n\n  const handleSearchInputChange = (value: string) => {\n    setSearchQuery(value);\n    setShowDropdown(value.length > 0);\n    if (value === \"\") {\n      setSelectedBook(null);\n      form.setValue(\"bookId\", \"\");\n    }\n  };\n\n  // Reset search when modal opens/closes\n  useEffect(() => {\n    if (open) {\n      setSearchQuery(\"\");\n      setSelectedBook(null);\n      setShowDropdown(false);\n      form.reset({\n        bookId: \"\",\n        dueDate: format(addDays(new Date(), 14), \"yyyy-MM-dd\"),\n      });\n    }\n  }, [open, form]);\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (showDropdown && searchAreaRef.current && !searchAreaRef.current.contains(event.target as Node)) {\n        setShowDropdown(false);\n      }\n    };\n\n    if (showDropdown) {\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }\n  }, [showDropdown]);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\" data-testid=\"modal-borrow-book\">\n        <DialogHeader>\n          <DialogTitle>Process Book Borrowing</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"bookId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Book</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\" ref={searchAreaRef}>\n                      <div className=\"relative\">\n                        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                        <Input\n                          placeholder=\"Search for a book by title, author, or ISBN...\"\n                          value={searchQuery}\n                          onChange={(e) => handleSearchInputChange(e.target.value)}\n                          onFocus={() => setShowDropdown(searchQuery.length > 0)}\n                          className=\"pl-10\"\n                          data-testid=\"input-search-book\"\n                        />\n                      </div>\n                      \n                      {showDropdown && filteredBooks.length > 0 && (\n                        <div className=\"absolute z-50 w-full mt-1 bg-background border border-border rounded-md shadow-lg max-h-60 overflow-hidden\">\n                          <ScrollArea className=\"max-h-60\">\n                            <div className=\"p-1\">\n                              {filteredBooks.map((book: any) => (\n                                <div\n                                  key={book.id}\n                                  className=\"flex items-center p-3 hover:bg-accent rounded-sm cursor-pointer\"\n                                  onMouseDown={() => handleBookSelect(book)}\n                                  data-testid={`option-book-${book.id}`}\n                                >\n                                  <Book className=\"w-4 h-4 text-muted-foreground mr-3 flex-shrink-0\" />\n                                  <div className=\"flex-1 min-w-0\">\n                                    <div className=\"font-medium text-sm truncate\">\n                                      {book.title}\n                                    </div>\n                                    <div className=\"text-xs text-muted-foreground truncate\">\n                                      by {book.author} • {book.availableQuantity} available\n                                    </div>\n                                    {book.isbn && (\n                                      <div className=\"text-xs text-muted-foreground\">\n                                        ISBN: {book.isbn}\n                                      </div>\n                                    )}\n                                  </div>\n                                </div>\n                              ))}\n                            </div>\n                          </ScrollArea>\n                        </div>\n                      )}\n                      \n                      {showDropdown && searchQuery.length > 0 && filteredBooks.length === 0 && (\n                        <div className=\"absolute z-50 w-full mt-1 bg-background border border-border rounded-md shadow-lg p-3\">\n                          <div className=\"text-sm text-muted-foreground text-center\">\n                            No books found matching \"{searchQuery}\"\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                  {selectedBook && (\n                    <div className=\"text-xs text-muted-foreground mt-1\">\n                      Selected: {selectedBook.title} by {selectedBook.author} ({selectedBook.availableQuantity} available)\n                    </div>\n                  )}\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"dueDate\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Due Date</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"date\" \n                      {...field} \n                      min={format(new Date(), \"yyyy-MM-dd\")}\n                      data-testid=\"input-due-date\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <div className=\"flex space-x-3 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                className=\"flex-1\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"flex-1\"\n                disabled={borrowBookMutation.isPending || availableBooks.length === 0}\n                data-testid=\"button-submit\"\n              >\n                {borrowBookMutation.isPending ? \"Processing...\" : \"Process Borrowing\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n        \n        {availableBooks.length === 0 && (\n          <div className=\"text-center text-sm text-muted-foreground\">\n            No books are currently available for borrowing.\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":12154},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"README.md":{"content":"# Hệ Thống Quản Lý Thư Viện\n\nMột hệ thống quản lý thư viện toàn diện được xây dựng với công nghệ web hiện đại, cung cấp nền tảng thư viện số đầy đủ tính năng để quản lý sách, theo dõi mượn sách, quản lý người dùng và giám sát hoạt động.\n\n## 🚀 Tính Năng Chính\n\n- **Quản lý Sách**: Thêm, sửa, xóa và tìm kiếm sách trong thư viện\n- **Hệ thống Mượn/Trả**:## 💡 **Quick Start Commands**Theo dõi việc mượn## 📞 **Support & Help**và trả sách với ngày hết hạn\n- **Quản lý Người dùng**: Phân quyền admin/user và quản lý tài khoản\n- **Thống kê Dashboard**: Hiển thị thống kê tổng quan và hoạt động thời gian thực\n- **Nhật ký Hoạt động**: Theo dõi tất cả các hoạt động trong hệ thống\n- **Giao diện Responsive**: Thiết kế mobile-first với layouts thích ứng\n\n## 🛠️ Công Nghệ Sử Dụng\n\n### Frontend\n\n- **React 18+** với TypeScript cho type safety\n- **Vite** - Build tool thế hệ mới cho development nhanh\n- **TanStack Query** - Quản lý state server và caching\n- **Wouter** - Router nhẹ cho client-side routing\n- **Radix UI + shadcn/ui** - Component library hiện đại\n- **Tailwind CSS** - Framework CSS utility-first\n- **React Hook Form + Zod** - Xử lý form và validation\n\n### Backend\n\n- **Node.js + Express.js** - Web application framework\n- **TypeScript** - Type safety toàn stack\n- **Drizzle ORM** - ORM an toàn kiểu cho PostgreSQL\n- **PostgreSQL** - Database chính với Neon serverless driver\n- **Passport.js** - Authentication middleware\n- **Express Sessions** - Quản lý session bảo mật\n\n## 📋 Yêu Cầu Hệ Thống\n\n- Node.js 18+\n- PostgreSQL database\n- npm hoặc yarn\n\n## 🚀 Hướng Dẫn Cài Đặt & Triển Khai\n\n### 📋 **BƯỚC 1: Cài Đặt Dependencies**\n\n```bash\n# Clone repository (nếu cần)\ngit clone <repository-url>\ncd ThuVienSo\n\n# Cài đặt packages\nnpm install\n```\n\n### 🗄️ **BƯỚC 2: Thiết Lập Database**\n\n#### **Option A: Sử Dụng Neon.tech (Khuyến nghị - Miễn phí)**\n\n1. **Đăng ký tài khoản:**\n\n   - Truy cập: https://neon.tech\n   - Đăng ký với GitHub/Google\n   - Tạo project mới\n\n2. **Tạo database:**\n   - Chọn region gần nhất (Singapore cho VN)\n   - Database name: `library_db`\n   - Copy connection string\n\n#### **Option B: PostgreSQL Local**\n\n```bash\n# Windows (với Chocolatey)\nchoco install postgresql\n\n# macOS (với Homebrew)\nbrew install postgresql\n\n# Ubuntu/Debian\nsudo apt install postgresql postgresql-contrib\n\n# Tạo database\ncreatedb library_db\n```\n\n### ⚙️ **BƯỚC 3: Cấu Hình Environment Variables**\n\nTạo file `.env` trong thư mục root:\n\n```env\n# ===========================================\n# DATABASE CONFIGURATION\n# ===========================================\n# Neon.tech example:\nDATABASE_URL=postgresql://username:password@ep-xxx.us-east-1.aws.neon.tech/database?sslmode=require\n\n# Local PostgreSQL example:\n# DATABASE_URL=postgresql://postgres:password@localhost:5432/library_db\n\n# ===========================================\n# ADMIN ACCOUNT\n# ===========================================\nADMIN_USERNAME=admin\nADMIN_PASSWORD=admin123\nADMIN_EMAIL=admin@library.local\n\n# ===========================================\n# SESSION SECURITY\n# ===========================================\nSESSION_SECRET=your-super-secret-session-key-change-in-production\n\n# ===========================================\n# SERVER CONFIG\n# ===========================================\nPORT=5000\nNODE_ENV=development\n```\n\n### 🏗️ **BƯỚC 4: Thiết Lập Database Schema**\n\n```bash\n# Push database schema\nnpm run db:push\n\n# Kiểm tra kết nối\nnpm run check\n```\n\n### 🚀 **BƯỚC 5: Chạy Ứng Dụng**\n\n#### **Development Mode**\n\n```bash\nnpm run dev\n```\n\n➡️ Truy cập: `http://localhost:5000`  \n➡️ Login: `admin` / `admin123`\n\n#### **Production Mode**\n\n```bash\nnpm run build\nnpm start\n```\n\n## 📱 Sử Dụng Hệ Thống\n\n### Đăng nhập Admin\n\n1. Truy cập `http://localhost:5000`\n2. Sử dụng tài khoản admin đã cấu hình:\n   - Username: `admin` (hoặc ADMIN_USERNAME đã set)\n   - Password: Mật khẩu đã cấu hình trong ADMIN_PASSWORD\n\n### Các Chức Năng Chính\n\n#### 🏠 Dashboard\n\n- Xem thống kê tổng quan (tổng số sách, người dùng, mượn sách)\n- Theo dõi sách phổ biến\n- Xem hoạt động gần đây\n\n#### 📚 Quản Lý Sách\n\n- **Thêm sách mới**: Điền thông tin (tiêu đề, tác giả, ISBN, thể loại, số lượng)\n- **Tìm kiếm**: Theo tiêu đề, tác giả hoặc ISBN\n- **Lọc**: Theo thể loại và trạng thái (có sẵn/đã mượn)\n- **Cập nhật**: Sửa thông tin sách\n- **Xóa**: Xóa sách khỏi hệ thống\n\n#### 👥 Quản Lý Người Dùng (Admin)\n\n- Xem danh sách tất cả người dùng\n- Thêm người dùng mới\n- Phân quyền admin/user\n- Tìm kiếm người dùng\n\n#### 📖 Hệ Thống Mượn/Trả\n\n- **Mượn sách**: Chọn sách và người mượn, set ngày hết hạn\n- **Trả sách**: Cập nhật trạng thái trả sách\n- **Theo dõi**: Xem danh sách sách đã mượn, quá hạn\n- **Lọc**: Theo trạng thái (đang mượn, đã trả, quá hạn)\n\n#### 📊 Nhật Ký Hoạt Động\n\n- Theo dõi tất cả hoạt động của người dùng\n- Lọc theo người dùng cụ thể\n- Xem lịch sử chi tiết\n\n## 🗄️ Database Schema\n\n### Bảng Chính\n\n#### `users` - Người dùng\n\n- `id` - User ID\n- `username` - Tên đăng nhập (cho local auth)\n- `email` - Email\n- `firstName`, `lastName` - Tên\n- `role` - Vai trò (admin/user)\n- `hashedPassword` - Mật khẩu đã mã hóa\n\n#### `books` - Sách\n\n- `id` - Book ID\n- `title` - Tiêu đề\n- `author` - Tác giả\n- `isbn` - Mã ISBN\n- `genre` - Thể loại\n- `quantity` - Số lượng tổng\n- `availableQuantity` - Số lượng có sẵn\n\n#### `borrowings` - Mượn sách\n\n- `id` - Borrowing ID\n- `userId` - ID người mượn\n- `bookId` - ID sách\n- `borrowDate` - Ngày mượn\n- `dueDate` - Ngày hết hạn\n- `returnDate` - Ngày trả (nullable)\n- `status` - Trạng thái (active/returned/overdue)\n\n#### `activity_logs` - Nhật ký hoạt động\n\n- `id` - Log ID\n- `userId` - ID người dùng\n- `action` - Hành động\n- `details` - Chi tiết\n- `timestamp` - Thời gian\n\n## 🔐 Bảo Mật\n\n- **Authentication**: Hệ thống đăng nhập an toàn với bcrypt password hashing\n- **Session Management**: HTTP-only cookies với CSRF protection\n- **Role-based Access**: Phân quyền admin/user\n- **Input Validation**: Zod schema validation cho tất cả inputs\n- **SQL Injection Prevention**: Drizzle ORM với prepared statements\n\n## 🚨 **Troubleshooting**\n\n### **❌ Lỗi Database Connection**\n\n```bash\n# Windows\necho $env:DATABASE_URL\n\n# Linux/macOS\necho $DATABASE_URL\n\n# Test connection\nnpm run db:push\n\n# Kiểm tra format connection string\n# Đúng: postgresql://user:pass@host:port/db?sslmode=require\n# Sai: postgres://... (thiếu 'ql')\n```\n\n### Lỗi Authentication\n\n```bash\n# Kiểm tra admin credentials\necho $ADMIN_USERNAME\necho $ADMIN_PASSWORD\n```\n\n### Port Conflicts\n\n- Frontend server mặc định chạy port 5000\n- Đảm bảo port không bị sử dụng bởi ứng dụng khác\n\n## 📞 Support\n\nNếu gặp vấn đề:\n\n1. Kiểm tra logs trong console\n2. Verify environment variables\n3. Đảm bảo database connection\n4. Restart application server\n\n## 🎯 Roadmap\n\n- [ ] Export/Import data\n- [ ] Email notifications\n- [ ] Advanced reporting\n- [ ] Multi-language support\n- [ ] Mobile app\n\n---\n\n**© 2024 Library Management System - Built with ❤️ using React + Express**\n","size_bytes":7794},"client/src/components/modals/add-admin-modal.tsx":{"content":"/**\n * ========================================================================\n * ADD ADMIN MODAL - MODAL THÊM ADMIN\n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Modal form để admin tạo admin accounts mới.\n * \n * Features:\n * - Username/password input với validation\n * - Auto-generate email từ username\n * - Create admin với proper role assignment\n * - Form validation và error handling\n * \n * Flow:\n * 1. Admin điền username và password\n * 2. System auto-generate email (username@admin.local)\n * 3. Submit POST /api/auth/create-admin\n * 4. New admin được tạo với admin role\n * 5. Success feedback và close modal\n * \n * Security:\n * - CHỈ existing admin có thể tạo admin mới\n * - Password validation requirements\n * - Controlled admin creation process\n */\nimport { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n/**\n * Zod schema validation cho admin creation\n */\nconst addAdminSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(3, \"Password must be at least 3 characters\"),\n});\n\ntype AddAdminFormData = z.infer<typeof addAdminSchema>;\n\ninterface AddAdminModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\n/**\n * Add Admin Modal component - CHỈ ADMIN\n * \n * Responsibilities:\n * - Provide form để create new admin users\n * - Validate admin credentials trước khi submit\n * - Handle admin creation API call\n * - Manage success/error states\n * \n * Permissions: CHỈ existing admin có thể access\n */\nexport function AddAdminModal({ open, onOpenChange }: AddAdminModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<AddAdminFormData>({\n    resolver: zodResolver(addAdminSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: AddAdminFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/create-admin\", {\n        username: data.username,\n        password: data.password,\n        email: `${data.username}@admin.local`,\n        firstName: \"Admin\",\n        lastName: \"User\",\n        role: 'admin'\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"Admin account created successfully\",\n      });\n      form.reset();\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create admin account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: AddAdminFormData) => {\n    mutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"modal-add-admin\">\n        <DialogHeader>\n          <DialogTitle>Add New Admin</DialogTitle>\n          <DialogDescription>\n            Create a new admin account with username and password. The admin will have full access to the system.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"username\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Username</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Enter username\" \n                      {...field} \n                      data-testid=\"input-admin-username\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"password\"\n                      placeholder=\"Enter password\" \n                      {...field} \n                      data-testid=\"input-admin-password\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex space-x-3 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                className=\"flex-1\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel-add-admin\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"flex-1\"\n                disabled={mutation.isPending}\n                data-testid=\"button-submit-add-admin\"\n              >\n                {mutation.isPending ? \"Creating...\" : \"Create Admin\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5902},"client/src/components/modals/notifications-modal.tsx":{"content":"/**\n * ========================================================================\n * NOTIFICATIONS MODAL - MODAL THÔNG BÁO\n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Modal complex cho notification/announcement system.\n * \n * Features:\n * - Tab-based interface (View / Create)\n * - Announcement creation cho admin\n * - Notification viewing cho all users\n * - Real-time notification list\n * - Delete notifications\n * \n * Tabs:\n * - View: Hiển thị all notifications/announcements\n * - Create: Form để admin tạo announcements mới\n * \n * Permissions:\n * - All users: View notifications\n * - Admin: View + Create announcements + Delete\n * \n * Flow:\n * 1. Modal mở với default tab theo role\n * 2. Users có thể view notifications\n * 3. Admin có thể create announcements\n * 4. Real-time updates cho notification list\n */\nimport { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { X, Send, Megaphone, Bell, Trash2 } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\n/**\n * Zod schema validation cho announcement creation\n */\nconst announcementSchema = z.object({\n  title: z.string().min(1, \"Title is required\").max(255, \"Title too long\"),\n  content: z.string().min(1, \"Content is required\"),\n});\n\ninterface NotificationsModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\n/**\n * Notifications Modal component\n * \n * Responsibilities:\n * - Provide notification viewing interface\n * - Handle announcement creation (admin only)\n * - Manage tab switching và role-based features\n * - Real-time notification updates\n * \n * UX Features:\n * - Tab interface với role-based defaults\n * - Scrollable notification list\n * - Form validation cho announcements\n * - Delete functionality với confirmations\n */\nexport default function NotificationsModal({ open, onOpenChange }: NotificationsModalProps) {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  \n  /**\n   * Tab state management với role-based defaults\n   * Admin default: \"create\" tab, Regular users: \"view\" tab\n   */\n  const [activeTab, setActiveTab] = useState<\"view\" | \"create\">(user?.role === \"admin\" ? \"create\" : \"view\");\n  \n  const form = useForm<z.infer<typeof announcementSchema>>({\n    resolver: zodResolver(announcementSchema),\n    defaultValues: {\n      title: \"\",\n      content: \"\",\n    },\n  });\n\n  // Fetch notifications for current user\n  const { data: notifications, refetch: refetchNotifications } = useQuery({\n    queryKey: [\"/api/notifications\"],\n    enabled: open,\n  });\n\n  // Fetch all notifications for admin\n  const { data: allNotifications, refetch: refetchAllNotifications } = useQuery({\n    queryKey: [\"/api/notifications/all\"],\n    enabled: open && user?.role === \"admin\" && activeTab === \"view\",\n  });\n\n  // Create announcement mutation (admin only)\n  const createAnnouncementMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof announcementSchema>) => {\n      await apiRequest(\"POST\", \"/api/notifications/announcement\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n      toast({\n        title: \"Success\",\n        description: \"Announcement sent to all users\",\n      });\n      form.reset();\n      setActiveTab(\"view\");\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to send announcement\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete notification (admin only)\n  const deleteNotificationMutation = useMutation({\n    mutationFn: async (notificationId: number) => {\n      await apiRequest(\"DELETE\", `/api/notifications/${notificationId}`);\n    },\n    onSuccess: () => {\n      refetchNotifications();\n      if (user?.role === \"admin\") {\n        refetchAllNotifications();\n      }\n      toast({\n        title: \"Success\",\n        description: \"Notification deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete notification\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof announcementSchema>) => {\n    createAnnouncementMutation.mutate(data);\n  };\n\n  const handleDeleteNotification = (notificationId: number) => {\n    deleteNotificationMutation.mutate(notificationId);\n  };\n\n  // Get the notifications to display based on user role\n  const displayNotifications = user?.role === \"admin\" ? \n    (allNotifications as any) || (notifications as any)?.notifications || [] :\n    (notifications as any)?.notifications || [];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[600px] max-h-[80vh] flex flex-col\" data-testid=\"modal-notifications\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Bell className=\"w-5 h-5\" />\n            Notifications\n          </DialogTitle>\n          <DialogDescription>\n            View and manage your notifications and announcements.\n          </DialogDescription>\n          \n          {user?.role === \"admin\" && (\n            <div className=\"flex gap-2 mt-4\">\n              <Button\n                variant={activeTab === \"view\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setActiveTab(\"view\")}\n                data-testid=\"button-tab-view\"\n              >\n                <Bell className=\"w-4 h-4 mr-2\" />\n                View Notifications\n              </Button>\n              <Button\n                variant={activeTab === \"create\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setActiveTab(\"create\")}\n                data-testid=\"button-tab-create\"\n              >\n                <Megaphone className=\"w-4 h-4 mr-2\" />\n                Create Announcement\n              </Button>\n            </div>\n          )}\n        </DialogHeader>\n\n        <div className=\"flex-1 min-h-0\">\n          {activeTab === \"create\" && user?.role === \"admin\" && (\n            <ScrollArea className=\"h-[400px] pr-4\">\n              <div className=\"space-y-4\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Create an announcement that will be sent to all users in the system.\n                </div>\n                \n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"title\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Announcement Title</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Enter announcement title\"\n                              {...field}\n                              data-testid=\"input-announcement-title\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"content\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Announcement Content</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder=\"Enter announcement content (supports all languages)\"\n                              rows={6}\n                              {...field}\n                              data-testid=\"textarea-announcement-content\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <div className=\"flex space-x-3 pt-4\">\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\" \n                        className=\"flex-1\"\n                        onClick={() => setActiveTab(\"view\")}\n                        data-testid=\"button-cancel-announcement\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button \n                        type=\"submit\" \n                        className=\"flex-1\"\n                        disabled={createAnnouncementMutation.isPending}\n                        data-testid=\"button-send-announcement\"\n                      >\n                        <Send className=\"w-4 h-4 mr-2\" />\n                        {createAnnouncementMutation.isPending ? \"Sending...\" : \"Send Announcement\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </div>\n            </ScrollArea>\n          )}\n\n          {activeTab === \"view\" && (\n            <ScrollArea className=\"h-[400px] pr-4\">\n              {displayNotifications.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {displayNotifications.map((notification: any) => (\n                    <div \n                      key={notification.id} \n                      className=\"p-4 rounded-lg border bg-card\"\n                      data-testid={`notification-${notification.id}`}\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center gap-2 mb-1 flex-wrap\">\n                            <h4 className=\"font-medium text-foreground truncate\">\n                              {notification.title}\n                            </h4>\n                            {notification.type === \"announcement\" && (\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                <Megaphone className=\"w-3 h-3 mr-1\" />\n                                Announcement\n                              </Badge>\n                            )}\n                          </div>\n                          <p className=\"text-sm text-muted-foreground mb-2 break-words\">\n                            {notification.content}\n                          </p>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {format(new Date(notification.createdAt), \"MMM dd, yyyy 'at' hh:mm a\")}\n                          </div>\n                        </div>\n                        {user?.role === \"admin\" && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteNotification(notification.id)}\n                            data-testid={`button-delete-${notification.id}`}\n                            className=\"flex-shrink-0 ml-2 text-destructive hover:text-destructive\"\n                            disabled={deleteNotificationMutation.isPending}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Bell className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                  <p>No notifications yet</p>\n                </div>\n              )}\n            </ScrollArea>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":13396},"COMPREHENSIVE_DOCUMENTATION.md":{"content":"# Library Management System - Comprehensive Documentation\n\n## Overview\n\nThis is a full-stack library management system built with React/TypeScript frontend and Express/Node.js backend. The system provides complete digital library functionality including book management, user administration, borrowing system, activity logging, and real-time notifications.\n\n## Recent Updates (Current Session)\n\n### 1. Notification System ✅\n**Implemented**: Complete announcement system for admin-to-user communication\n\n**Features:**\n- Admin can create system-wide announcements\n- Real-time notification count display in header\n- Modal-based notification interface with separate admin/user views\n- Support for all languages and characters (UTF-8)\n- Automatic notification polling every 30 seconds\n- Mark notifications as read functionality\n\n**Technical Implementation:**\n- New `notifications` table in database with proper relations\n- API endpoints: GET /api/notifications, POST /api/notifications/announcement, PUT /api/notifications/:id/read\n- NotificationsModal component with admin creation and user viewing modes\n- Updated header component with notification count badge\n- Storage methods for notification management\n\n**Database Schema Addition:**\n```sql\nnotifications {\n  id: serial PRIMARY KEY\n  title: varchar(255) NOT NULL\n  content: text NOT NULL\n  type: varchar(50) DEFAULT 'announcement'\n  created_by_id: varchar NOT NULL (FK to users)\n  is_read: boolean DEFAULT false\n  user_id: varchar (NULL for global announcements, FK to users for specific)\n  created_at: timestamp DEFAULT now()\n  updated_at: timestamp\n}\n```\n\n### 2. Logout Redirect Fix ✅\n**Issue**: Users saw 404 Page Not Found after logout and login instead of dashboard\n**Root Cause**: After login success, users remained on `/login` path which doesn't exist in authenticated router\n**Solution**: Added explicit navigation to dashboard (`setLocation(\"/\")`) after successful login/registration\n**Files Modified**: `client/src/pages/login.tsx` - added useLocation hook and navigation after auth success\n\n### 3. Authentication Flow Improvements\n- Fixed race condition by awaiting refetch() before navigation\n- Proper session management and state updates\n- Consistent redirect behavior for both login and registration\n\n## System Architecture\n\n### Database Design\n**PostgreSQL with the following core tables:**\n- `users` - User authentication and profile data\n- `books` - Book catalog with availability tracking\n- `borrowings` - Borrowing transactions and history\n- `activity_logs` - System audit trail\n- `notifications` - Admin announcements and user notifications (NEW)\n- `sessions` - Secure session storage\n\n### Technology Stack\n\n**Frontend:**\n- React 18+ with TypeScript\n- Wouter for routing\n- TanStack Query for state management\n- Radix UI + shadcn/ui components\n- Tailwind CSS for styling\n- React Hook Form + Zod validation\n\n**Backend:**\n- Node.js + Express.js\n- TypeScript for type safety\n- Drizzle ORM for database operations\n- PostgreSQL with Neon serverless\n- Express sessions for authentication\n- RESTful API design\n\n**Authentication:**\n- Local username/password authentication\n- Session-based auth with HTTP-only cookies\n- Role-based access control (admin/user)\n- Secure password hashing with bcrypt\n\n## API Endpoints\n\n### Authentication\n- `POST /api/auth/login` - User login\n- `POST /api/auth/register` - User registration\n- `GET /api/auth/user` - Get current user\n- `POST /api/auth/logout` - User logout\n- `GET /api/logout` - Logout with redirect\n\n### Notifications (NEW)\n- `GET /api/notifications` - Get user notifications with unread count\n- `POST /api/notifications/announcement` - Create admin announcement\n- `PUT /api/notifications/:id/read` - Mark notification as read\n\n### Books\n- `GET /api/books` - List books with search/filter\n- `POST /api/books` - Create book (admin)\n- `PUT /api/books/:id` - Update book (admin)\n- `DELETE /api/books/:id` - Delete book (admin)\n\n### Borrowings\n- `GET /api/borrowings` - List borrowings\n- `POST /api/borrowings` - Create borrowing\n- `PUT /api/borrowings/:id/return` - Return book\n\n### Users (Admin Only)\n- `GET /api/users` - List all users\n- `PUT /api/users/:id/role` - Update user role\n- `DELETE /api/users/:id` - Delete user\n\n### Dashboard & Logs\n- `GET /api/dashboard/stats` - System statistics\n- `GET /api/activity-logs` - Activity history\n\n## Key Features\n\n### Core Functionality\n1. **Book Management** - Complete CRUD with search, filtering by genre, and availability tracking\n2. **Borrowing System** - Checkout/return workflow with due date tracking and overdue management\n3. **User Administration** - Role-based access, user management (admin only)\n4. **Activity Logging** - Comprehensive audit trail for all system operations\n5. **Dashboard Analytics** - Real-time statistics and activity monitoring\n\n### New Features\n6. **Notification System** - Admin announcements with real-time updates\n7. **Improved Authentication** - Fixed logout redirect and session management\n\n### User Experience\n- Responsive design working on mobile and desktop\n- Real-time data updates with optimistic UI\n- Intuitive search and filtering\n- Clean, modern interface with shadcn/ui\n- Accessibility considerations with ARIA labels\n\n## Security Features\n\n### Authentication Security\n- Secure password hashing with bcrypt (cost factor 10)\n- HTTP-only session cookies\n- CSRF protection through SameSite cookies\n- Session expiration (1 week TTL)\n- Role-based authorization checks\n\n### Data Security\n- SQL injection protection through Drizzle ORM\n- Input validation with Zod schemas\n- XSS protection through React's built-in escaping\n- Secure session storage in PostgreSQL\n\n### Known Security Considerations\n⚠️ **Development Dependencies**: esbuild has moderate security vulnerabilities that affect development but not production\n- Vulnerability: esbuild <=0.24.2 enables websites to send requests to dev server\n- Impact: Development environment only\n- Recommendation: Update to latest esbuild version when available\n- Production Impact: None (esbuild not used in production builds)\n\n## Dependencies Analysis\n\n### Core Production Dependencies ✅\nAll production dependencies are properly installed and up-to-date:\n- React ecosystem (React 18+, React Query, React Hook Form)\n- Express.js with TypeScript support\n- Database layer (Drizzle ORM, PostgreSQL drivers)\n- UI components (Radix UI, Lucide icons)\n- Authentication (bcrypt, session management)\n- Validation (Zod)\n\n### Development Dependencies ✅\nDevelopment tools are properly configured:\n- TypeScript compilation\n- Vite build system\n- Tailwind CSS processing\n- Drizzle Kit for database management\n\n### Missing Dependencies Analysis\n✅ **No missing dependencies detected** - All required packages are present in package.json and installed correctly.\n\n### Recommended Updates\n1. **esbuild**: Update when newer version available to address security warning\n2. **Regular maintenance**: Run `npm audit` and `npm update` periodically\n3. **Dependency monitoring**: Consider using Dependabot or similar tools\n\n## Deployment Guide\n\n### Prerequisites\n- Node.js 18+ \n- PostgreSQL database\n- Environment variables configured\n\n### Environment Variables Required\n```bash\nDATABASE_URL=postgresql://username:password@host:port/database\nSESSION_SECRET=your-secure-session-secret\nNODE_ENV=production\nPORT=5000\n```\n\n### Production Deployment Steps\n\n1. **Install Dependencies**\n   ```bash\n   npm install --production\n   ```\n\n2. **Build Application**\n   ```bash\n   npm run build\n   ```\n\n3. **Database Setup**\n   ```bash\n   npm run db:push\n   ```\n\n4. **Start Production Server**\n   ```bash\n   npm start\n   ```\n\n### Replit Deployment\nThe application is optimized for Replit deployment:\n- Automatic environment configuration\n- Integrated PostgreSQL database\n- One-click deployment\n- Built-in SSL/TLS termination\n\n### Health Checks\n- API endpoint: `GET /api/auth/user` (returns user data when authenticated)\n- Database connectivity: Automatic Drizzle ORM connection testing\n- Session store: PostgreSQL session table health\n\n## Performance Considerations\n\n### Frontend Optimizations\n- React Query caching reduces API calls\n- Component lazy loading where appropriate\n- Optimized bundle size with Vite\n- Efficient re-rendering with proper dependency arrays\n\n### Backend Optimizations\n- Database query optimization with Drizzle ORM\n- Proper indexing on frequently queried columns\n- Session storage in PostgreSQL for persistence\n- Efficient pagination for large datasets\n\n### Database Performance\n- Proper foreign key relationships\n- Indexed columns for search operations\n- Optimized queries with select-only needed fields\n- Connection pooling through database driver\n\n## Monitoring and Maintenance\n\n### Logging\n- Express request/response logging\n- Error logging for debugging\n- Activity logging for audit trail\n- Session management logging\n\n### Health Monitoring\n- Application status through log monitoring\n- Database connection health\n- API response times\n- User activity patterns\n\n### Maintenance Tasks\n1. **Regular Database Cleanup**: Old sessions, expired logs\n2. **Security Updates**: Keep dependencies updated\n3. **Performance Monitoring**: Track response times and resource usage\n4. **Backup Strategy**: Regular database backups\n5. **Session Management**: Monitor session store size\n\n## Troubleshooting Guide\n\n### Common Issues\n\n**1. 404 After Login (FIXED)**\n- Issue: Users see 404 instead of dashboard after login\n- Solution: Implemented in current session - automatic redirect to dashboard\n\n**2. Notification System Not Working**\n- Check: Database notifications table exists\n- Check: API endpoints responding (GET /api/notifications)\n- Check: User permissions for admin announcement creation\n\n**3. Database Connection Issues**\n- Verify DATABASE_URL environment variable\n- Check PostgreSQL service status\n- Ensure database schema is up-to-date with `npm run db:push`\n\n**4. Authentication Problems**\n- Clear browser cookies/session storage\n- Check SESSION_SECRET environment variable\n- Verify session table in database\n\n**5. Build/Development Issues**\n- Clear node_modules and reinstall: `rm -rf node_modules && npm install`\n- Clear Vite cache: Remove .vite directory\n- Check TypeScript compilation: `npm run check`\n\n### Debug Mode\nEnable detailed logging by setting environment:\n```bash\nNODE_ENV=development\n```\n\n## Future Enhancements\n\n### Potential Improvements\n1. **Email Notifications**: Integrate email service for overdue books\n2. **Book Reservations**: Allow users to reserve books that are currently borrowed\n3. **Advanced Search**: Full-text search with Elasticsearch or similar\n4. **Reports**: Generate usage reports, popular books, user statistics\n5. **Mobile App**: React Native companion app\n6. **Multi-language**: i18n support for multiple languages\n7. **Book Recommendations**: AI-powered recommendation system\n8. **Digital Books**: Support for PDF/ebook lending\n\n### Technical Debt\n1. **Error Boundaries**: Add React error boundaries for better error handling\n2. **Testing**: Implement comprehensive test suite (unit, integration, e2e)\n3. **API Documentation**: Generate OpenAPI/Swagger documentation\n4. **Performance Monitoring**: Implement APM tools\n5. **Accessibility**: Complete WCAG compliance audit\n6. **Security Audit**: Professional security review\n\n## Support and Documentation\n\n### Code Structure\n- `/client` - React frontend application\n- `/server` - Express.js backend API\n- `/shared` - Shared TypeScript schemas and types\n- Component organization follows feature-based structure\n\n### Development Workflow\n1. Run development server: `npm run dev`\n2. Database changes: `npm run db:push`\n3. Type checking: `npm run check`\n4. Production build: `npm run build`\n\n### Getting Help\n- Check logs in Replit console\n- Review API responses in browser developer tools\n- Database issues: Check PostgreSQL logs\n- Authentication issues: Clear session and retry\n\n---\n\n**Last Updated**: Current session\n**Version**: 1.0.0\n**Author**: Library Management System Team","size_bytes":12003},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working  \n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Remove complex OIDC authentication and implement simple username/password login\n[x] 5. Set up PostgreSQL database and fix persistence issues\n[x] 6. Fix logout 404 error by adding proper GET route\n[x] 7. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool\n[x] 8. Migration completed - Database provisioned, dependencies installed, schema pushed, application running successfully\n[x] 8. Complete migration verification and mark as finished","size_bytes":686},"client/src/components/modals/edit-book-modal.tsx":{"content":"/**\n * ========================================================================\n * EDIT BOOK MODAL - MODAL CHỈNH SỬA SÁCH\n * HỆ THỐNG QUẢN LÝ THƯ VIỆN - LIBRARY MANAGEMENT SYSTEM\n * ========================================================================\n * \n * Modal form để admin chỉnh sửa thông tin sách đã có.\n * \n * Features:\n * - Form pre-population với existing book data\n * - Field validation với Zod schema\n * - Update book information\n * - Quantity management\n * - Genre và description updates\n * \n * Flow:\n * 1. Modal nhận book object để edit\n * 2. Form được populate với current book data\n * 3. Admin modify các fields cần thiết\n * 4. Submit PUT /api/books/:id với updated data\n * 5. Refresh book lists và dashboard stats\n */\nimport { useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Book } from \"@shared/schema\";\n\n/**\n * Zod schema validation cho edit book form\n * Tương tự add book nhưng cho editing existing records\n */\nconst editBookSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  author: z.string().min(1, \"Author is required\"),\n  isbn: z.string().min(1, \"Book ID is required\"),\n  genre: z.string().min(1, \"Genre is required\"),\n  quantity: z.coerce.number().min(1, \"Quantity must be at least 1\"),\n  description: z.string().optional(),\n});\n\ntype EditBookFormData = z.infer<typeof editBookSchema>;\n\ninterface EditBookModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  book: Book | null;                                // Book object to edit\n}\n\n/**\n * Edit Book Modal component - CHỈ ADMIN\n * \n * Responsibilities:\n * - Pre-populate form với existing book data\n * - Handle form updates và validation\n * - Submit PUT request với updated information\n * - Manage loading states và error handling\n * \n * Permissions: Admin only (controlled by parent component)\n */\nexport function EditBookModal({ open, onOpenChange, book }: EditBookModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<EditBookFormData>({\n    resolver: zodResolver(editBookSchema),\n    defaultValues: {\n      title: \"\",\n      author: \"\",\n      isbn: \"\",\n      genre: \"\",\n      quantity: 1,\n      description: \"\",\n    },\n  });\n\n  // Update form values when book changes\n  useEffect(() => {\n    if (book) {\n      form.reset({\n        title: book.title,\n        author: book.author,\n        isbn: book.isbn,\n        genre: book.genre,\n        quantity: book.quantity,\n        description: book.description || \"\",\n      });\n    }\n  }, [book, form]);\n\n  const mutation = useMutation({\n    mutationFn: async (data: EditBookFormData) => {\n      if (!book) throw new Error(\"No book selected\");\n      await apiRequest(\"PUT\", `/api/books/${book.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/books\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Book updated successfully\",\n      });\n      onOpenChange(false);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update book\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: EditBookFormData) => {\n    mutation.mutate(data);\n  };\n\n  const genres = [\n    \"fiction\",\n    \"non-fiction\",\n    \"science\",\n    \"history\",\n    \"biography\",\n    \"mystery\",\n    \"romance\",\n    \"fantasy\",\n    \"thriller\",\n    \"self-help\",\n    \"technology\",\n    \"art\",\n    \"business\",\n    \"health\",\n    \"travel\",\n    \"cooking\",\n    \"other\",\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"modal-edit-book\">\n        <DialogHeader>\n          <DialogTitle>Edit Book</DialogTitle>\n          <DialogDescription>\n            Update the book information. The Book ID cannot be changed.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Book Title</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Enter book title\" \n                      {...field} \n                      data-testid=\"input-edit-title\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"author\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Author</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Enter author name\" \n                      {...field} \n                      data-testid=\"input-edit-author\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"isbn\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Book ID</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Enter book ID\" \n                      {...field} \n                      disabled={true}\n                      className=\"bg-muted cursor-not-allowed\"\n                      data-testid=\"input-edit-isbn\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"genre\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Genre</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-edit-genre\">\n                        <SelectValue placeholder=\"Select a genre\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {genres.map((genre) => (\n                        <SelectItem key={genre} value={genre}>\n                          {genre.charAt(0).toUpperCase() + genre.slice(1)}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"quantity\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Quantity</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"number\" \n                      min=\"1\"\n                      placeholder=\"Enter quantity\" \n                      {...field} \n                      data-testid=\"input-edit-quantity\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Enter book description\" \n                      rows={3}\n                      {...field} \n                      data-testid=\"textarea-edit-description\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex space-x-3 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => onOpenChange(false)}\n                className=\"flex-1\"\n                data-testid=\"button-cancel-edit\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={mutation.isPending}\n                className=\"flex-1\"\n                data-testid=\"button-save-edit\"\n              >\n                {mutation.isPending ? \"Updating...\" : \"Update Book\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9943}},"version":1}